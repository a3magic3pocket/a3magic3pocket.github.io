[ { "title": "DB를 활용한 리더선출락 구현", "url": "/posts/db-based-leader-election-lock/", "categories": "Concurrency", "tags": "lock, spring, kotlin", "date": "2025-04-11 22:35:03 +0900", "snippet": "개요 여러 컨테이너가 동시에 실행되는 환경에서는특정 작업(이하 리더 작업)을 오직 하나의 컨테이너만 수행해야 할 때가 있다. 리더 작업은 리더가 주기적으로 실행하고리더가 아닌 다른 컨테이너는 대기해야한다. 만약 리더가 다운되어 리더 작업이 불가능한 경우최대한 빨리 대기하고 있는 다른 컨테이너 중 하나를 리더로 선출한 뒤 리더 작업을 이행해야한다. DB를 이용하여 리더선출락을 구현하고리더선출 과정을 설명한다.리더선출과정 3개의 컨테이너가 리더 작업에 참여한다. 이 중 하나의 컨테이너를 리더로 선택하여 리더작업을 진행하..." }, { "title": "Spring Kafka에서 최신 메시지만 소비하는 Pub/Sub 방식 설정", "url": "/posts/spring-kafka-latest-message-pub-sub-config/", "categories": "Kafka", "tags": "kafka, spring, kotlin, pubsub", "date": "2025-04-11 22:34:28 +0900", "snippet": "설명 Kafka를 Pub/Sub 방식으로 활용하고 싶을 때, 특정 토픽의 가장 최신 메시지만 소비하는 구조가 필요하다. 이 글에서는 Spring Kafka에서 auto-offset-reset: latest와 seekToEnd() 설정을 조합하여, 컨슈머가 파티션에 연결되었을 때 항상 최신 메시지만 소비하도록 설정하는 방법을 소개한다.auto-offset-reset: latest 컨슈머 그룹이 아직 오프셋을 저장하지 않은 파티션을처음 읽을 때 어디서부터 읽을지를 지정한다. latest로 설정하면, 해당 컨슈머 그룹은 파티션..." }, { "title": "Spring Kafka 컨슈머 배치 설정", "url": "/posts/spring-kafka-batch-consumer-config/", "categories": "Kafka", "tags": "kafka, spring, kotlin, batch", "date": "2025-04-11 22:33:19 +0900", "snippet": "개요 컨슈머에서 폴링 시 배치 단위로 가져오게 할 수 있다. 이를 통하여 처리 성능을 높일 수 있다.설정 application.yml spring: kafka: bootstrap-servers: &quot;kafka:9092&quot; producer: key-serializer: org.apache.kafka.common.serialization.StringSerializer value-serializer: org.springframework.kafka.support..." }, { "title": "Spring Kafka 컨슈머 수동 커밋 설정", "url": "/posts/spring-kafka-manual-commit-config/", "categories": "Kafka", "tags": "kafka, spring, kotlin", "date": "2025-04-11 22:32:36 +0900", "snippet": "개요 카프카 기본 설정은 오토 커밋이다. 이 경우, 컨슈머가 메시지를 실제로 처리했는지와 무관하게, 일정 시간이 지나면 자동으로 오프셋이 커밋된다. 그 결과 메세지가 유실될 수 있다. 이를 방지하기 위해 수동 커밋을 설정한다.설정 application.yml spring: kafka: bootstrap-servers: &quot;kafka:9092&quot; producer: key-serializer: org.apache.kafka.common.serialization.Str..." }, { "title": "Spring Kafka 컨슈머 멀티스레드 처리 설정", "url": "/posts/spring-kafka-multithreaded-consumer-config/", "categories": "Kafka", "tags": "kafka, spring, kotlin, concurrency", "date": "2025-04-11 22:31:49 +0900", "snippet": "개요 Spring Kafka의 @KafkaListener 어노테이션에서 concurrency 속성을 설정하면,리스너 컨테이너가 해당 수만큼의 스레드를 생성하여 동일한 리스너 로직을 병렬로 실행하며 메시지를 처리한다.가정 도커로 카프카 컨테이너 한 개를 띄운다. 스프링으로 카프카와 소통한다. 스프링 카프카 의존성 및 스프링 의존성 설치는 이미 된 상태이다.설정 application.yml spring: kafka: bootstrap-servers: &quot;kafka:9092&quot; p..." }, { "title": "Kafka를 활용한 대용량 이벤트 처리 구조 설계와 성능 비교", "url": "/posts/kafka-large-scale-event-processing-architecture-and-performance-comparison/", "categories": "Kafka", "tags": "kafka, spring, kotlin", "date": "2025-04-11 22:30:12 +0900", "snippet": "목적 서비스에서 처리량이 증가하거나 작업 시간이 길어지는 상황에서 기존의 동기식 직접 DB 접근방식이 가진 한계를 확인하고 Kafka 기반 비동기 처리 구조의 성능 및 안정성을 확인하기 위함실험환경 애플리케이션Kotlin Spring Boot 기반 API 서버 DB: MariaDB Kafka: 단일 노드 트랜잭션 타임아웃: 1분 인위적 딜레이: 일부 실험에서 0.3초 지연 삽입 성능 측정 도구: k6 vus: 1000(가상 유저 1000명) durations: 5m (총 5분간 실행) ..." }, { "title": "메트릭 모니터링(prometheus, grafana, alertmanager)", "url": "/posts/metrics-monitoring-with-prometheus-grafana-and-alertmanager/", "categories": "Monitoring", "tags": "prometheus, grafana, alertmanager, essay", "date": "2025-04-06 08:49:51 +0900", "snippet": "정의 시스템 상태와 성능을 지속적으로 관찰하고 분석하는 과정이를 통해 문제를 조기에 발견하는 것을 목표로 한다.메트릭(metric)이란 시스템, 애플리케이션 또는 프로세스의 성능이나 상태를 수치적으로 표현한 데이터 포인트 우리는 메트릭을 지속적으로 수집하여문제 발생 시 경고(alert)을 보내거나시각화하여 문제를 빠르게 판단하는 시스템을 구축한다.사용툴 프로메테우스(prometheus) 메트릭 수집 및 저장 그라파나(grafana) 메트릭을 시각화 얼럿매니저(al..." }, { "title": "인증방식 고민", "url": "/posts/exploring-authentication-options/", "categories": "Authentication", "tags": "jwt, essay", "date": "2025-04-06 08:49:12 +0900", "snippet": "세션 인증 방식과 JWT 인증 방식의 차이 세션 방식 서버에서 사용자 정보를 key-value 저장소에 저장 서버에서 key를 사용자 쿠키에 담아서 전송 사용자가 인증이 필요한 요청을 하면요청과 함께 키가 담긴 쿠키가 서버로 전송됨 서버는 key를 가지고 key-value 저장소를 조회하여인증정보가 유효함을 확인함 세션 방식의 문제 인증 정보가 key-value 저장소에 저장되기 때문에인증 요청이 많아질수록 key-value 저장소에 저장되는인증 정보량도..." }, { "title": "동시성 문제 해결 방안 성능 실험", "url": "/posts/solving-concurrency-problems-with-performance-in-mind/", "categories": "Concurrency", "tags": "k6, lock, essay", "date": "2025-04-06 08:48:05 +0900", "snippet": "동시성 문제란? 여러 프로세스나 스레드가 동시에 실행되는 상황에서 자원(데이터 등)을 제대로 공유하거나 수정하지 못해 발생하는 문제구체적인 상황 id, numLikes 필드로 이뤄진 POST 테이블이 있다. likePost 함수는 postId를 인자로 받고, post을 조회한 뒤 기존 numLikes를 읽고 그 값에 +1을 한 값을 저장한다. 이때 두 트랜잭션이 동시에 likePost 함수를 호출하면둘 중 하나의 트랜잭션은 덮어쓰기 되어 갱신이 소실된다.해결 방법 비관적 락(pessimistic lock) ..." }, { "title": "블루 - 그린 배포 실험", "url": "/posts/experimenting-with-blue-green-deployments/", "categories": "Deployment", "tags": "blue-green, essay", "date": "2025-04-06 08:47:25 +0900", "snippet": "블루 - 그린 배포란? 두 개의 동일한 환경(블루와 그린)을 유지하며, 새 버전을 배포한 후 트래픽을 전환하여 새로운 버전을 운영에 적용왜 하는가? 새로운 애플리케이션 버전을 배포하면서 서비스 중단 없이안전하게 전환하기 위해서작동 방식 블루 환경에서 운영 중 기존 애플리케이션(블루)이 사용자의 모든 트래픽을 처리하고 있음 그린 환경에서 새 버전 배포 새로운 애플리케이션 버전을 그린 환경에 배포한 뒤 테스트 수행 트래픽 전환 모든 트래픽을 블루 환경에..." }, { "title": "오라클 클라우드 로드밸런서 HTTPS 설정하기", "url": "/posts/setting-https-for-oracle-cloud-load-balancer/", "categories": "Oracle-cloud", "tags": "oracle-cloud, loadbalancer, summary", "date": "2025-03-31 23:15:02 +0900", "snippet": "설명 SSL 인증서를 로드밸런서에 등록한다. HTTPS 용 리스너를 생성한다. SSL 인증서는 let’s encrypt 인증서를 기준으로 설명한다.Let’s Encrypt SSL 인증서 파일 설명 Certificate (인증서) 파일 (fullchain.pem) 로드 밸런서에 등록되는 서버 인증서 서버 Public key 도 포함되어 있음 Private Key(비밀키) 파일(private.pem) 웹서버가 SSL/TLS 암호화 할때 사용 SSL 인증서를 로드..." }, { "title": "오라클 클라우드 로드밸런서 생성 및 적용하기", "url": "/posts/creating-and-applying-oracle-cloud-load-balancer/", "categories": "Oracle-cloud", "tags": "oracle-cloud, loadbalancer, summary", "date": "2025-03-31 23:14:03 +0900", "snippet": "설명 로드밸런서를 생성하고 기존에 생성한 VM을 백엔드로 지정한다. 로드밸런서에서 HTTP 요청을 받아 백엔드로 전달하는 예시를 작성한다.로드밸런서 생성 (검색창에서)로드 밸런서 검색 후 선택 (로드 밸런서 본문에서) “로드 밸런서 생성” 버튼 클릭 (로드 밸런서 생성 - 세부정보 추가에서) 로드 밸런서 이름 원하는 이름 입력 가시성 유형 선택 인터넷에 노출할 것이므로 퍼블릭 선택 ..." }, { "title": "오라클 클라우드 VM에 서브넷 보안목록 설정하기", "url": "/posts/setting-subnet-security-lists-on-oracle-cloud-vm/", "categories": "Oracle-cloud", "tags": "oracle-cloud, subnet, security-list, summary", "date": "2025-03-31 23:12:57 +0900", "snippet": "설명 VCN(가상 클라우드 네트워크)에서 보안목록을 생성한다. VCN(가상 클라우드 네트워크)에서 서브넷을 생성한다. VM 생성 시 서브넷을 선택하여 생성한다.보안목록을 수정할 수 있지만 이미 생성한 VM에서 다른 서브넷으로 변경할 수는 없다.VCN(가상 클라우드 네트워크) 실제 클라우드 내에서의 네트워크를 분리하고 격리하는 역할보안목록 서브넷에 속한 리소스들의 트래픽을 제어하는 규칙 인바운드 규칙 외부에서 들어오는 트래픽을 제어한다. IP CIDR, 프로토콜, 포트를 설정한다. ..." }, { "title": "코틀린 스프링 ExceptionAdvice 스니펫", "url": "/posts/kotlin-spring-exceptionadvice-snippets/", "categories": "Kotlin", "tags": "kotlin, summary", "date": "2025-03-30 23:15:06 +0900", "snippet": "최초 ExceptionAdvice 세팅package kotlins.pring.snippet.config import org.springframework.web.bind.annotation.RestControllerAdvice @RestControllerAdvice class ExceptionAdvice { } Jackson parsing 실패 에러 - 필수 필드 누락 발생 이유 dto의 non-nullable 한 필드를 요청에서 누락한다면jackson par..." }, { "title": "코틀린 스프링 컨트롤러 스니펫", "url": "/posts/kotlin-spring-controller-snippets/", "categories": "Kotlin", "tags": "kotlin, summary", "date": "2025-03-30 23:14:16 +0900", "snippet": "최초 RestController 세팅package kotlins.pring.snippet.controller import org.springframework.web.bind.annotation.RequestMapping import org.springframework.web.bind.annotation.RestController import kotlins.pring.snippet.service.FruitService @RestController @RequestMapping(&quot;/v1..." }, { "title": "코틀린 스프링 querydsl 스니펫", "url": "/posts/kotlin-spring-querydsl-snippets/", "categories": "Kotlin", "tags": "kotlin, querydsl, summary", "date": "2025-03-30 23:13:25 +0900", "snippet": "최초 세팅 build.gradle.kts plugins { val kotlinVersion = &quot;2.1.10&quot; kotlin(&quot;jvm&quot;) version kotlinVersion kotlin(&quot;plugin.spring&quot;) version kotlinVersion kotlin(&quot;plugin.jpa&quot;) version kotlinVersion id(&quot;org.spri..." }, { "title": "코틀린 스프링 서비스와 레포지토리 스니펫", "url": "/posts/kotlin-spring-service-and-repository-snippets/", "categories": "Kotlin", "tags": "kotlin, summary", "date": "2025-03-30 23:11:39 +0900", "snippet": "최초 Service 세팅@Service class FruitService( private val fruitRepository: FruitRepository ) { // 서비스 메서드 추가 } JPA 레포지토리(Repository) 세팅@Repository interface FruitRepository : JpaRepository&amp;lt;Fruit, Long&amp;gt; { // 쿼리 메서드 추가 } JPA 레포지토리(Repository) 이용 단일 생성(Create a New Record)..." }, { "title": "코틀린 스프링 엔티티 스니펫", "url": "/posts/kotlin-spring-entity-snippets/", "categories": "Kotlin", "tags": "kotlin, summary", "date": "2025-03-30 23:10:52 +0900", "snippet": "과일(fruit) 엔티티package kotlins.pring.snippet.entity import jakarta.persistence.* import kotlins.pring.snippet.config.converter.BooleanYNConverter import org.hibernate.annotations.CreationTimestamp import org.hibernate.annotations.UpdateTimestamp import java.time.ZonedDateTime ..." }, { "title": "nestjs에서 swagger 이용하기", "url": "/posts/nestjs-swagger/", "categories": "Nest", "tags": "nest, swagger", "date": "2024-06-26 01:33:12 +0900", "snippet": "개요 nestjs에서 swagger를 이용한다.설치npm install -D @nestjs/swagger swagger-ui-express 설정 설명 개발 서버로 실행할 경우http://localhost:8080/api로 접속할 수 있다. 아래 코드에서 swaggerEndpoint 값을 바꾸면 swagger 문서 진입 경로를 바꿀 수 있다. main.js import { DocumentBuilder, SwaggerModule } from &quot;@nestjs/swagger&q..." }, { "title": "nestjs에서 mongodb-memory-server 이용하여 테스트 작성하기", "url": "/posts/nestjs-memory-mongodb-for-test/", "categories": "Nest", "tags": "nest, mongodb-memory-server", "date": "2024-06-26 01:31:32 +0900", "snippet": "개요 nestjs에서mongodb-memory-server를 이용하여 메모리용 mongodb 인스턴스를 생성하고유닛테스트를 작성한다.설치npm install -D mongodb-memory-server test 용 mongodb 설정 test/momory-mongodb-setup.ts import { MongoMemoryServer } from &quot;mongodb-memory-server&quot;; let mongo: MongoMemoryServer; export..." }, { "title": "nestjs에서 kafkajs 사용하기", "url": "/posts/nestjs-kafkajs/", "categories": "Nest", "tags": "nest, kafka", "date": "2024-06-26 01:30:17 +0900", "snippet": "개요 kafkajs를 사용해서 nestjs에서 kafka를 제어한다. nest.js에서 제안하는 방식은 microservice를 이용하는 것인데kafkajs 공식문서 사용법을 이용하는 방식이 더 직관적이어서이 방법을 선택하여 구현하였다.[참고1][참고2] kafkajs는 kafka streams는 지원하지 않는다.kafkajs 구성 개요 kafka 인스턴스를 생성한다. kafka producer 인스턴스를 생성한다. kafka consumer 인스턴스를 생성하는 factory를 생성한다. factory는 consu..." }, { "title": "nestjs에서 custom validator 구현", "url": "/posts/nestjs-custom-validator/", "categories": "Nest", "tags": "nest, class-validator", "date": "2024-06-26 01:28:51 +0900", "snippet": "개요 class-validator를 이용하여 custom validator를 생성하고 적용한다.class-validator란? 유효성 검사 라이브러리로 클래스 기반의 객체 유효성을 간편하게 검사할 수 있다. 클래스의 프로퍼티 위에 데코레이터를 선언하여 유효성 검사 규칙을 적용한다. [참고1 - 데코레이터 목록]설치npm install --save class-validator class-validator 예시 설명 post 목록을 조회하는 Controller를 만들고Query에 담긴 page-num과 ..." }, { "title": "nestjs에서 Google OAuth2.0 인증 구현", "url": "/posts/nestjs-google-oauth2/", "categories": "Nest", "tags": "nest, passport, oauth2", "date": "2024-06-26 01:25:42 +0900", "snippet": "개요 nest.js에서 passport-google-oauth20를 이용하여 Google OAuth2.0 인증을 구현한다. express-session을 이용하여 session 인증을 구현한다.의존성 패키지 설치npm install --save passport npm install --save passport-google-oauth20 npm install --save express-session npm install -D @types/express-session npm install -D @types/passpor..." }, { "title": "mongoDB Sink Connector, FullKeyStrategy id-strategy 사용하기", "url": "/posts/mongodb-sink-connector-fullkeystrategy/", "categories": "Kafka", "tags": "kafka, kafka-connect, mongodb-sink-connector", "date": "2024-04-08 18:22:46 +0900", "snippet": "개요 PartialValueStrategy 사용할 때 Custom Post Processor를 사용하는 경우,키로 사용되는 필드가 Post Processing 대상이 되면 ReplaceOneBusinessKeyStrategy이 동작하지 않는다. id-strategy와 상관없이 Post Processing을 적용하기 쉽도록메세지 키를 이용하여 문서 _id를 만드는 전략인 FullKeyStrategy를 사용한다.FullKeyStrategy 메세지의 키에서 _id 필드만 추출하여 그 값을 키로 사용하는 전략이다. 메세지 예시..." }, { "title": "카프카 커넥트(kafka connect), Custom Post Processor 만들기", "url": "/posts/kafka-connect-custom-post-processor/", "categories": "Kafka", "tags": "kafka, kafka-connect", "date": "2024-04-05 14:34:13 +0900", "snippet": "개요 카프카 스트림에서 string 타입으로 저장된 ID 값을mongoDB sink connector에 저장할때 objectID 타입으로 저장하고 싶다. mongoDB sink connector의 Custom Post Processor를 만들어서해결하였다. [참고1 - How to convert a String field to ObjectId in MongoSinkConnector]Post Processor 설명 [참고2 - How to Create a Custom Post Processor] ..." }, { "title": "카프카 커넥트(kafka connect), json 스키마 사용하기", "url": "/posts/kafka-connect-json-schema/", "categories": "Kafka", "tags": "kafka, kafka-streams, kafka-connect, json-schema", "date": "2024-04-05 11:36:01 +0900", "snippet": "개요 카프카 스트림(kafka streams) 데이터를 mongoDB로 보낼때타입을 명시하고 싶을 때가 있다. 이때 json 스키마를 사용할 수 있다. 정해진 포맷에 맞춰 작성 후 데이터를 담아 보내면mongodb가 데이터를 지정된 타입으로 인식하고 저장한다. json 스키마는 매번 스키마를 같이 보내야하기 때문에전송되는 데이터 크기가 그냥 json만 보냈을 때보다 크다. 이때는 스키마 레지스트리(schema registry)를 사용하여 스키마를 저장하고, mongoDB에서 이를 참조할 수 있게 하면 크기를 줄일 수 ..." }, { "title": "카프카 커넥트(kafka connect)로 mongoDB에 카프카 스트림 쓰기", "url": "/posts/write-kafka-stream-to-mongodb-using-kafka-connect/", "categories": "Kafka", "tags": "kafka, kafka-streams, kafka-connect", "date": "2024-03-27 23:23:11 +0900", "snippet": "개요 카프카 스트림의 취합된 결과를 외부 스토리지에 저장하고 싶을 때가 있다. 이때 결과가 담긴 토픽 데이터를카프카 커넥트(kafka connect)를 이용하여 다른 스토리지에 저장한다. 카프카, mongodb, 카프카 커넥트를 도커 컴포즈로 구축한다.카프카 커넥트 카프카 커넥트는 카프카 스트림 데이터를 다른 스토리지로 옮기거나(Sink Connector)다른 스토리지 데이터를 카프카로 옮길 수 있다(Source Connector). 예시에서는 카프카 스트림 데이터를 mongoDB로 옮기는Sink Connector를 ..." }, { "title": "여러 개의 카프카 스트림 사용하기", "url": "/posts/multiple-kafka-streams/", "categories": "Kafka", "tags": "kafka, kafka-streams", "date": "2024-03-27 21:46:18 +0900", "snippet": "개요 토픽마다 다른 json을 받는 카프카 스트림을 생성한다. 카프카 스트림은같은 이름의 StreamsBuilderFactoryBean Bean을 오직 하나만 허용한다. 따라서 StreamsBuilderFactoryBean에 이름을 부여하여여러 개 생성할 수 있도록 한다. 이름이 다른 StreamsBuilderFactoryBean은@Qualifier를 이용하여 로드한다[참고1][참고2]. 카프카 스트림 스토어(store)를 직접 조회해야 하는 경우@Autowired로 StreamBuilder를 의존성 주입하여 사용한다..." }, { "title": "카프카 스트림, JsonSerializer 사용하기", "url": "/posts/kafka-streams-jsonserializer_result/", "categories": "Kafka", "tags": "kafka, kafka-streams", "date": "2024-03-27 21:02:48 +0900", "snippet": "개요 생산자(procuder)와 카프카 스트림(kafka streams)이서로 Json으로 메세지를 주고 받도록 한다[참고1]. 커스텀 Serde를 선언하고 카프카 스트림 설정의 value_serde에 등록한다.Serde란? Serde란 Serializer&amp;lt;&amp;gt;와 Deserializer&amp;lt;&amp;gt; 담긴 Wrapper 이다[참고2]. Serializer는 생산자가 메시지를 Serialization 할 때 사용한다. Deserializer는 소비자가 메세지를 Deserializat..." }, { "title": "카프카 스트림이란?(kafka stream)", "url": "/posts/kafka-streams/", "categories": "Kafka", "tags": "kafka, kafka-streams", "date": "2024-03-27 20:14:04 +0900", "snippet": "스트림이란? 한 방향으로 흐르는 연속된 데이터 흐름[참고1[참고2]카프카 스트림이란? 카프카 스트림은 스트림을 처리하는 라이브러리이다. 카프카 스트림은 소비자(consumer)에서 동작한다. 예를 들면, ‘블로그 포스트 조회 수’ 같은 이벤트와 같이실시간으로 갱신되는 데이터를 처리할 수 있다.카프카 스트림 특징 카프카 스트림은 정확히 한 번(exactly once)만 데이터를 저장한다[참고3]. 하나의 카프카 스트림에도 멀티 스레딩과 리커버리를 지원하기 때문에쉽게 대용량 처리가 가능하다[참고4]카프카 스트림 구조 ..." }, { "title": "MultipartFile.getInputStream() java.nio.file.NoSuchFileException in async", "url": "/posts/multipartfile-getinputstream-nosuchfileexception-async/", "categories": "Spring", "tags": "spring", "date": "2024-03-27 17:06:26 +0900", "snippet": "개요 비동기 함수 안에서 MultipartFile.getInputStream() 실행 시임시 파일이 없다는 에러가 난다.원인 컨트롤러에서 multipart/form-data 요청을 받으면해당 파일이 임시 경로에 저장되는 듯 하다. 이때 MultipartFile.getInputStream() 실행하면 임시 파일에서 stream 연결을 불러오는 것 같다. 임시 파일은 해당 요청에 대한 응답을 해버리면 즉시 삭제하는 것 같다. 떄문에 응답 후에 비동기 함수에서 MultipartFile.getInputStream()를 실행하..." }, { "title": "카프카, JsonSerializer 사용하기", "url": "/posts/kafka-jsonserializer/", "categories": "Kafka", "tags": "kafka, spring", "date": "2024-03-27 16:35:51 +0900", "snippet": "개요 카프카 생산자(producer) value serializer를 JsonSerializer로 설정한다. 카프카 소비자(consumer) value deserializer를 JsonDeserializer로 설정한다. 소비자 그룹마다 다른 json을 message로 받을 수 있도록 한다.환경 java 21 spring boot 3.2.3의존성 패키지 설치implementation &#39;org.springframework.kafka:spring-kafka&#39; 하나의 객체를 jsonSerialization..." }, { "title": "spring security 6에서 oauth2.0 구현하기(google)", "url": "/posts/spring-security-6-oauth2-google/", "categories": "Spring", "tags": "spring, spring-security", "date": "2024-03-26 20:37:39 +0900", "snippet": "개요 spring security 6을 이용하여 oauth2.0 인증을 구현해본다. 예시에서는 oauth 2.0 인증 프로바이더로 google을 사용한다.Oauth 2.0 이란 표준화된 인증 방식을 의미한다. 한 곳에서 Ouath 인증을 하면 이 인증을 공유하는 애플리케이션끼리별도의 인증 없이 인증할 수 있다[참고1].일반적인 구글 Oauth 2.0 구현 과정 구글 콘솔에서 oauth 2.0 사용자를 등록한다.이떄 구글 로그인 성공 시 access_token을 받을 redirect_uri를 입력해야 한다. redir..." }, { "title": "카프카, 정확히 한 번(kafka, exactly once)", "url": "/posts/kafka-exactly-once/", "categories": "Kafka", "tags": "kafka", "date": "2024-03-26 16:00:13 +0900", "snippet": "개요 카프카의 생산자(producer)의 메시지가소비자에게 정확히 한 번만 배달되도록 할 수 있을까? 결론은 소비자(consumer)의 작업이 카프카 내부에서만 이뤄진다면 정확히 한 번 메세지를 배달하는 것이 가능하다. 하지만 소비자의 작업이 RDBMS와 같은 외부 저장소까지 포함한다면정확히 한 번 메세지를 배달한다고 보장할 수 없다.카프카란? 대용량 처리를 위한 메시지 지향 미들웨어이다[참고1].대략적인 구조 생산자(producer) - 브로커(broker) - 소비자(consumer)로 이뤄진다. 생산자에서 메세..." }, { "title": "Support for the experimental syntax &#39;decorators-legacy&#39; isn&#39;t currently enabled", "url": "/posts/decorators-legacy-error/", "categories": "Javascript", "tags": "babel", "date": "2024-02-19 12:07:53 +0900", "snippet": "현상 next.js에서 api 개발 시 typeorm을 적용하려고 하니에러가 발생한다. 아마 typeorm의 데코레이터 문법이 원인으로 보이며바벨에서 데코레이터 문법으로 지원하게 설정해주면 된다.해결방안 @babel/plugin-proposal-decorators 설치 npm install @babel/plugin-proposal-decorators --save .babel 파일 수정 { &quot;presets&quot..." }, { "title": "solana DApp 인증 구현", "url": "/posts/solana-wallet-signin/", "categories": "React", "tags": "solana, next, react", "date": "2024-02-19 10:48:24 +0900", "snippet": "개요 solana DAPP에서 지갑인증을 구현해본다. 지갑으로 인증된 유저만 특정 페이지를 조회할 수 있도록 처리할 수 있다. How to Integrate Sign-in Authentication with a Solana Wallet을 그대로 따라 진행한다. 중요한 부분만 설명을 추가한다.환경 next.js로 DApp을 구현하였다. 인증 시 사용하는 api는 next.js의 API 기능을 사용한다. NextAuth.js를 이용하여 인증을 구현한다.인증 원리 지갑의 전자서명(signMessage(data)) ..." }, { "title": "certbot, DNS 인증 시 자동 갱신하게 만들기(AWS Route 53)", "url": "/posts/cerbot-route53/", "categories": "Certbot", "tags": "certbot, route53, nginx", "date": "2023-11-20 18:29:45 +0900", "snippet": "설명 certbot에서는 여러 방식으로 웹서버 소유권 인증을 지원한다.getting-certificates-and-choosing-plugins 와일드카드 인증서를 발급받기 위해서는 DNS를 사용하여 인증을 받아야 한다. 여러 DNS를 지원하지만 여기서는 AWS Route53 기준으로 설명한다. 최초 발급 방법과 자동갱신 방법을 함께 설명한다. 예시에서 인증서를 발급할 도메인은 helloworld.com이라고 가정한다.기본 방식 서버에서 nginx 도커를 띄워 웹을 띄운다. cerbot 도커를 이용하여 인증서를 획..." }, { "title": "certbot, webroot 방식으로 인증서 발급받기", "url": "/posts/cerbot-webroot/", "categories": "Certbot", "tags": "cerbot, nginx", "date": "2023-11-20 18:28:45 +0900", "snippet": "설명 webroot 방식으로 certbot 인증서를 발급받는다. certbot 도커를 활용하여 인증서를 발급 받는다. 예시에서 인증 받을 도메인은 helloworld.com으로 가정한다.사전 준비 nginx를 띄우고 Route 53 DNS에서 서버IP와 도메인을 연결한다.이를 통해 도메인을 입력하여 서버로 http 접속이 가능한 상태가 된다. /var/www/letsencrypt/.well-known/acme-challenge 디렉토리를 생성한다. mkdir -p /var/www/letsencrypt/.well-..." }, { "title": "next.js 빌드 시 ReferenceError: self is not defined 해결", "url": "/posts/next-reference-error-self-is-not-defined/", "categories": "React", "tags": "next, react", "date": "2023-11-20 18:15:03 +0900", "snippet": "설명 컴포넌트를 import 할 때 생길 수 있는 오류이다. import 대상 컴포넌트에 오직 클라이언트에서만 사용할 수 있는 기능이포함된 경우, 사전 렌더링에 실패할때 이 오류가 발생한다. next/dynamic을 사용하여 ssr를 사용하지 않고 import를 하면 된다.예시import dynamic from &quot;next/dynamic&quot;; const YourClientOnly= dynamic( () =&amp;gt; import(&quot;@/component/your-client..." }, { "title": "multiple sheets 사용 시 tableOverflow 활성화하기(jspreadsheet-ce)", "url": "/posts/activate-table-overflow-using-multiple-sheets/", "categories": "Javascript", "tags": "jspreadsheet-ce", "date": "2023-11-20 18:01:59 +0900", "snippet": "설명 jspreadsheet-ce에서 sheet를 생성할때 tableOverflow를 지정할 수 있다. tableOverflow를 false로 설정하면 사용자 커서가 화면 밖으로 넘어가도화면이 커서를 따라지 않는다. tableOverflow를 true로 설정하면 사용자 커서가 화면 밖으로 넘어가면자동으로 화면이 커서를 따라 이동한다. 문제는 jspreadsheet-ce에서 sheet를 여러개 사용하면tableOverflow: true가 제대로 동작하지 않는다. fullscreen: false, tableHeight:..." }, { "title": "useEffect cleanUp 함수를 이용하여 react state를 순차적으로 제어하기(zustand)", "url": "/posts/render-react-state-using-useEffect-cleanup-function/", "categories": "React", "tags": "react, useeffect, cleanup, zustand", "date": "2023-11-20 17:54:37 +0900", "snippet": "설명 어떤 react state를 순차적으로 제어하고 싶을때 trigger 용 react state를 생성하여 제어할 수 있다. const [target, setTarget] = useState(&quot;&quot;) const [trigger, setTrigger] = useState(&quot;wait&quot;) useEffect(() =&amp;gt; { setTrigger(&quot;first&quot;) }, []) useEffect(() =&amp..." }, { "title": "juqery library element에 React component 연동하기(react portal)", "url": "/posts/how-to-use-react-portal/", "categories": "React", "tags": "react, next, react-portal", "date": "2023-11-20 17:38:29 +0900", "snippet": "설명 react로 개발하다보면 react를 지원하지 않는 library(비react library)를 사용해야할 경우가 생긴다. 비react library element에 react component를 연동해야할 일이 있다면react portal을 사용하여 해결할 수 있다.react portal이란? 공식홈페이지 createPortal react component를 특정 HTML DOM element 하위로 이동시켜주는 기능이다. createPortal() 함수로 포탈노드를 만든 뒤 렌더하면인자로 받은 react c..." }, { "title": "javascript, 개별 instance를 전역에서 접근할 수 있도록 변경", "url": "/posts/javascript-instance-inject-window/", "categories": "Javascript", "tags": "javascript", "date": "2023-09-26 22:54:58 +0900", "snippet": "설명 javascript legacy 소스코드 중 class(이하 OldClass)로 처리하고 있는 부분을 발견. OldClass의 특정 method를 다른 js파일(이하 NewFile)에서 호출해야하는 상황 발생. 문제는 OldClass에는 contructor 문이 작성되어 있어NewFile 내에서 OldClass instance를 생성하기 어려운 상황. OldClass의 해당 method를 뽑아내어 공용 js 파일로 분리시키는 것이 가장 좋으나의존성 파악이 쉽지 않고 긴급하게 처리해야 하는 경우OldClass i..." }, { "title": "nginx, AWS cloudfront로 리버스 프록시 설정 에러", "url": "/posts/nginx-aws-cloudfront-reverse-proxy-error/", "categories": "Nginx", "tags": "nginx, aws, cloudfront", "date": "2023-09-26 22:03:12 +0900", "snippet": "현상 기존 CDN을 AWS cloudfront + s3 CDN(이하 cloudfront)으로 변경하였다. proxy_pass 경로를 기존 CDN URL에서 cloudfront URL로 변경하였지만포워딩 되지 않고 에러가 발생하였다.에러 원문 SSL: error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure:SSL alert number 40) while SSL handshaking to upstream 에러 원문 후미에는 CD..." }, { "title": "windows-nvm d drive 설치 시 npm 인식 못하는 이슈", "url": "/posts/windows-d-drive-npm-error/", "categories": "Node", "tags": "windows-nvm, npm", "date": "2023-09-26 21:59:21 +0900", "snippet": "현상 nvm 설치 시 root 경로를 D drive로 설정한 경우D drive에서 nvm 명령어 입력 시 에러가 발생한다.에러 ERROR open \\settings.txt: The system cannot find the file specified해결방법 nvm root 경로 하위를 보면 settings.txt를 발견할 수 있다. settings.txt를 C drive 하위로 옮기면 위 에러가 해결된다.참고 when install in another partition npm is not working #46" }, { "title": "Apache에서 TLSv1, TLSv1.1 접근 막기", "url": "/posts/prevent-apache-tlsv1-tlsv2/", "categories": "Webserver", "tags": "apache, tls, ssl", "date": "2023-09-13 20:26:23 +0900", "snippet": "설명 Apache Webserver에서 보안성이 낮은 프로토콜인TLSv1, TLSv1.1을 허용하지 않게 설정한다.설정파일 수정 가정 conf.d/my.conf에서 SSL 설정을 한다고 가정한다. conf/http.conf에서 conf.d/my.conf를 include 하고 있다고 가정한다. conf/http.conf ... IncludeOptional conf.d/my.conf conf.d/my.conf Listen 443 https &amp;lt;Vir..." }, { "title": "PHP와 MySQL 간 AES 암호화", "url": "/posts/aes-php-mysql/", "categories": "Encryption", "tags": "aes, php, mysql", "date": "2023-09-13 20:24:27 +0900", "snippet": "php 예시class AES { function encrypt(string $message, string $key, string $iv) { $encoding = &#39;UTF-8&#39;; $chiperAlgorithm = &#39;aes-256-cbc&#39;; $utf8Key = mb_convert_encoding($key, $encoding, mb_detect_encoding($key)); $hashedKey = hash(&#39;sha256&#3..." }, { "title": "Python과 MySQL 간 AES 암호화", "url": "/posts/aes-python-mysql/", "categories": "Encryption", "tags": "aes, python, mysql", "date": "2023-09-13 20:20:20 +0900", "snippet": "상황 MySQL DB 테이블의 특정 컬럼 데이터를 AES로 암호화하고자 한다. 암호화 되지 않은 데이터가 이미 DB에 있기 때문에DB의 aes_encrypt 명령어로 일괄 암호화 한다. Python 프로그램에서도 aes.encrpt, aes.decrypt 함수를 구현하고DB 일괄 암호화 이후에는 암호화 및 복호화를 Python에서 진행한다.중요한 점 DB에서 AES로 암호화한 메세지 hash를Python에서 복호화할 수 있어야 한다. 이를 위해 AES 암호화 시 사용하는 여러 값들을 DB와 python에서 동일하게 맞..." }, { "title": "Markdown link 정규식(regular expression)", "url": "/posts/markdown-link-regex/", "categories": "Regex", "tags": "markdown, regex", "date": "2023-09-13 19:16:35 +0900", "snippet": "개요 마크다운 문서에서 링크만 추출하여 모든 링크에 ‘{:target=”_blank”}‘을 추가하는 golang 프로그램을 작성하고자 한다. 마크다운 이미지와 마크다운 문서를 구분하기 위해가장 앞에 !가 붙는지 안 붙는지 정규식에서 판단해야한다. 이때 negative lookahead를 사용하려 했으나 (?!pattern)golang에서는 성능 정책 이슈로 지원하지 않는다고 한다.Negative look-ahead in Go regular expressions !가 앞에 붙지 않는 경우와 [가 처음으로 시작하는 경우를정..." }, { "title": "CRNN으로 숫자 OCR 학습시키기", "url": "/posts/learning-crnn/", "categories": "CRNN", "tags": "deeplearning, crnn, pytorch", "date": "2023-03-29 01:30:00 +0900", "snippet": "문제 Ultimate Car Driving Online 스크린샷에서속도 부분만 캡쳐하여 숫자를 알아내고자 한다. 작은 CRNN 모델을 학습시켜 해결하였다.전반적인 과정 여러 폰트로 숫자가 표시된 이미지를 생성하여 train dataset을 만든다. CRNN을 학습시킨다. Ultimate Car Driving Online 를 플레이하며 스크린샷을 찍어 test dataset을 만든다. 학습한 CRNN로 test dataset을 예측해본다. 예측결과가 잘 나오지 않았다면 처음부터 부분 부분 수정해가며 위 과정을..." }, { "title": "Kubernetes(minikube)를 이용하여 웹 애플리케이션 운영하기", "url": "/posts/kubernetes-deploy-application/", "categories": "Kubernetes", "tags": "kubernetes, minikube, docker, git, git-action, dockerhub, cicd", "date": "2023-02-14 00:42:00 +0900", "snippet": "Kubernetes란 쿠버네티스란 무엇인가? 컨테이너 오케스트레이션 툴이다. 쿠버네티스는 Docker swarm mode와 비슷하나대규모 애플리케이션에 보다 더 적합하다. Docker Swarm vs Kubernetes: how to choose a container orchestration tool minikube란 쿠버네티스에 익숙해질 수 있도록 제공하는 실험용 툴이다. hello-minikube 본격적으로 쿠버네티스를 사용할 경우, 3개의 노드가 필수적으로 ..." }, { "title": "Docker swarm mode을 이용하여 웹 애플리케이션 운영하기", "url": "/posts/docker-swarm-mode-deploy-application/", "categories": "Docker", "tags": "docker, docker-swarm, git, git-action, dockerhub, cicd", "date": "2023-02-08 23:56:00 +0900", "snippet": "docker swarm mode 란 컨테이너 오케스트레이션 툴이다. 컨테이너 오케이션 툴 배포, 관리, 확장, 네트워킹을 자동화한다. 컨테이너 오케스트레이션이란? 기본적인 환경 설정 docker-compose yml 파일에 배포할 환경의 명세를 적는다. 배포 명령을 실행하면 yml 파일대로 환경을 조성한다. 주로 관리하는 기능은 아래와 같다. 각 도커 이미지를 서..." }, { "title": "SIMPLE-LOCKER 간단한 설명", "url": "/posts/introduce-simple-locker/", "categories": "Prototype", "tags": "prototype", "date": "2023-02-08 23:01:00 +0900", "snippet": "소개 CI / CD 파이프라인을 구축할때 사용하기 위해 만든 간단한 웹 애플리케이션이다. 자신만의 ‘구역’을 생성하고 ‘구역’에 코인로커를 생성 및 할당, 삭제하는 간단한 앱이다.이용방법 예시 시작하기 메인 메인에 접속한다 회원가입 및 로그인 회원가입 및 로그인을 한다. 시작하기를 누른다. ..." }, { "title": "dynalist 검색 및 변경(search and replace)", "url": "/posts/dynalist-search-and-replace/", "categories": "Dynalist", "tags": "dynalist, memo", "date": "2023-02-08 22:42:00 +0900", "snippet": "현재 문서 전체에서 검색 및 변경 제목에 마우스를 올려보면(hover) 햄버거 메뉴가 뜬다. 햄버거 메뉴를 클릭하고 search and replace를 클릭한다. search에 검색하고자 하는 단어를 replace에 변경하고자 하는 단어를 입력한다. ‘Replace all’을 클릭하면 검색 및 변경이 동작한다. 현재 문서의 일부분에서 검색 및 변경 제목 대신 변경하고자 하는 부분에 마우스를 올려본다. 햄버거 메뉴가 뜬다면 위와 똑같이 작업하면 된다. 참고 dynalist-2019-..." }, { "title": "dynalist 여러 줄 코드 블럭 사용하기(multi line code block)", "url": "/posts/dynalist-multi-line-code-block/", "categories": "Dynalist", "tags": "dynalist, memo", "date": "2023-02-08 22:42:00 +0900", "snippet": "기본 코드 블록 사용법 방법 ```hello world ``` 결과 hello world 하지만 개행을 하면 아래와 같이 bullet 기호가 박혀버린다. 방법 ``` hello world ``` 결과 ``` hello world ``` multi line code 블록에서 ..." }, { "title": "git action과 dockerhub을 이용한 CI/CD 파이프라인 구축", "url": "/posts/cicd-using-git-action-and-dockerhub/", "categories": "CICD", "tags": "git, git-action, dockerhub, cicd", "date": "2023-02-05 12:49:00 +0900", "snippet": "CI/CD란 상세한 정의 Red Hat 문서에 상세하게 잘 적혀있다. CI/CD(CI CD, 지속적 통합/지속적 배포): 개념, 툴, 구축, 차이 (redhat.com) CI/CD 파이프라인: 개념, 방법, 장점, 구현 과정 (redhat.com) CI 여러 개발 소스를 자동으로 합쳐준다. 임시로 합친 결과물은 테스트(test)를 통과해야하며 통과하지 못하면 최종 소스코드에 반영되지 않는다. ..." }, { "title": "search_after를 이용한 pagination(10000개 이상 문서에서 조회)", "url": "/posts/elasticsearch-pagination-search-after/", "categories": "ELK", "tags": "elk, elasticsearch, search, search-after", "date": "2022-07-08 19:00:00 +0900", "snippet": "개요 elasticsearch에서는 pagination을 위해 search 명령 시 from과 size로 한 번에 볼 수 있는 문서양을 조절할 수 있다. 문제는 from과 size 문서는 10,000개 이하 문서까지만 조회가 가능한다는 것이다. 10,001번째 문서는 from과 size로 조회하면 빈 값만 리턴하게 된다. 이때는 정렬할 필드를 지정 후 정렬하고, search_after 인자를 이용해서 그 다음 문서를 조회할 수 있다.예시 데이터 | id | 부서명 || — | —— || 1 | A0001 || ..." }, { "title": "ILM을 사용하여 일정 기간마다 자동으로 인덱스 삭제하기", "url": "/posts/elasticsearch-index-lifecycle-management/", "categories": "ELK", "tags": "elk, elasticsearch, ilm, index-lifecycle-management", "date": "2022-07-08 19:00:00 +0900", "snippet": "개요 엘라스틱서치에서 발행하는 많은 에러는 많은 경우 지정된 노드 수보다 더 많은 양의 문서를 생성해서 생긴 것이었다. 따라서 사용을 많이 하지 않는 문서는 주기적으로 지워주는 것이 필수적이다. ILM을 사용하면 조건을 지정하여, 해당 조건 충족 시 자동으로 인덱스를 삭제해준다. 여기서는 키바나를 사용한 방법을 기록한다.ILM에서 정책 생성 키바나 접속 &amp;gt; (좌상단) 햄버거 메뉴 클릭 &amp;gt; (Management 하위의) Stack Management 클릭 &amp;gt; Index Lifecy..." }, { "title": "filebeat input에 s3 사용하기(not using AWS SQS)", "url": "/posts/filebeat-input-s3/", "categories": "ELK", "tags": "elk, elasticsearch, filebeat", "date": "2022-06-21 19:00:00 +0900", "snippet": "개요 filebeat의 input으로 s3를 사용한다. s3 input은 filebeat 8.x 버전부터 지원한다. AWS SQS(Simple Queue Service)를 사용하는 방법이 있으나여기서는 filebeat이 직접 s3를 탐색하는 방법을 설명한다.filebeat에서 s3를 바라보는 것 외에 다른 방법 logstash input 에서도 s3를 읽어올 수 있다. filebeat는 server 내에 설치되어 동작하는 작은 agent이기 때문에scale out 하는 기능이 없다. 만약 로그량이 너무 많아 file..." }, { "title": "unassigned shards 발생 원인 및 해결방법", "url": "/posts/elasticsearch-unassigned-shards/", "categories": "ELK", "tags": "elk, elasticsearch, unassigned-shards", "date": "2022-06-13 19:00:00 +0900", "snippet": "개요 kibana에서 elasticsearch status를 확인해보니 red가 되었음을 확인하였다. status red란 primary shards 중 unassigned 된 것이 있다는 의미이다. 원인은 node 수에 비해 지나치게 많은 인덱스가 생성되어 unassigned 된 것이었다. node 수를 늘리거나 불필요한 인덱스를 제거하여 해결할 수 있다. replica 수 변경으로 샤드 할당에 실패한 것일 수도 있으니 replica 수도 조정한다.elasticsearch 상태 확인 # 결과에서 unas..." }, { "title": "elasticsearch wildcard를 사용하여 여러 인덱스를 한 번에 삭제하기", "url": "/posts/elasticsearch-remove-indices-with-wildcard/", "categories": "ELK", "tags": "elk, elasticsearch, index", "date": "2022-06-13 18:55:00 +0900", "snippet": "개요 elasticsearch는 기본적으로 와일드카드를 이용한 인덱스 삭제가 금지되어 있다. 잠시 해당 설정을 풀고 와일드카드를 이용한 삭제를 한 후 다시 해당 설정으로 복원하도록 한다.wildcard를 이용한 삭제 # wildcard 사용 금지 해제 curl -XPUT \\ &quot;http://localhost:9200/_cluster/settings?pretty&quot; \\ -H &#39;Content-Type: application/json&#39; \\ -d &#39;{ &..." }, { "title": "elasticsearch depreciation log 안 보기", "url": "/posts/elasticsearch-not-allow-depreciation-log/", "categories": "ELK", "tags": "elk, elasticsearch, index", "date": "2022-06-13 18:55:00 +0900", "snippet": "개요 elasticsearch의 depreciation log가 너무 많이 기록되어kibana에서 조회 시 정작 필요한 로그 조회가 힘들게 되었다. depreciation log를 보지 않도록 설정한다.logger.org.elasticsearch.deprecation를 OFF curl -XPUT \\ &quot;http://localhost:9200/_cluster/settings?pretty&quot; \\ -H &#39;Content-Type: application/json&#39; \\ ..." }, { "title": "security_exception, failed to authenticate user [x-pack-user] 에러", "url": "/posts/elasticsearch-fail-to-auth/", "categories": "ELK", "tags": "elk, elasticsearch, x-pack, auth", "date": "2022-06-13 18:40:00 +0900", "snippet": "개요 elasticsearch heap 메모리 부족 에러 발생 시 x-pack으로 생성한 유저의 로그인이 무조건 실패하기 시작했다. elasticsearch 개별 서버에 슈퍼 권한을 가진 로컬 유저를 생성하여 해결할 수 있다. 슈퍼 권한 로컬 유저로 x-pack-user의 비밀번호를 변경하면 x-pack-user 역시 로그인이 가능해진다. 다만 elasticsearch heap 메모리 부족 에러가 해결되면 x-pack 유저 로그인 에러도 자동으로 해결된다.elasticsearch 로컬 유저 생성 설명 ..." }, { "title": "circuit_breaking_exception, [parent] Data too large 에러", "url": "/posts/elasticsearch-heap-memory-fault/", "categories": "ELK", "tags": "elk, elasticsearch, heap", "date": "2022-06-13 18:35:00 +0900", "snippet": "개요 kibana가 다운되어 확인해보니, kibana 최초 시작 시 elasticsearch에 요청하는 GET _cat/indices가 실패하고 있었다. 에러는 “circuit_breaking_exception”, [parent] Data too large 원인은 heap 메모리가 부족이고 elasticsearch에서 사용하는 heap 메모리를 늘려서 해결하였다.“circuit_breaking_exception”, [parent] Data too large 에러의 원인 GET _cat/indices 요청의 결과가 ela..." }, { "title": "github webhook을 이용한 원격서버 배포 자동화(AWS)", "url": "/posts/github-webhook/", "categories": "Git", "tags": "github, webhook, deployment, aws", "date": "2021-10-09 23:25:00 +0900", "snippet": "개요 코드를 수정하고 테스트 서버에 반영하는데 매번 똑같은 pull 명령만 날리는 것 같아 이를 자동화했다. github webhook을 이용하면 git remote repo에서 push가 발생했을 때 지정한 주소로 post 명령을 날려준다. 테스트 서버에서는 github webhook을 바라 보고 있는 작은 웹서버를 구동하다가,요청이 들어오면 미리 작성한 script를 실행하여 배포한다.환경 os ubuntu 20.04 lts cloud AWS 구조 ..." }, { "title": "logstash에 grok pattern 적용하기", "url": "/posts/logstash-grok-pattern/", "categories": "Elastic", "tags": "logstash, grok, regular expression", "date": "2021-10-06 17:25:00 +0900", "snippet": "개요 logstash filter를 쓸 때 grok pattern을 사용하는 법을 익힌다. logstash grok 관련 문서logstash 정형화 방법 logstash는 비정형 데이터를 input으로 받았을 때 filter를 통해 정형 데이터로 바꿀 수 있다. 이때 dissect나 grok을 쓸 수 있는데,dissect는 구분자(delimiter)를 이용하여 정형화하는 방법이고,grok은 정규식을 이용하여 정형화하는 방법이다. 여기서는 grok만 알아본다.Grok Basic grok 문법 %{SYN..." }, { "title": "docker container 환경에서 ELK(Elasticsearch, Logstash, Kibana)로 로깅해보기", "url": "/posts/elk-container-example/", "categories": "Elastic", "tags": "docker, container, filebeat, elk, elasticsearch, logstash, kibana", "date": "2021-10-05 17:25:00 +0900", "snippet": "개요 application server 및 ELK를 docker container로 올려두고 로깅해본다.구조 개요 api, front, logstash, elasticsearch, kibana 컨테이너를 띄워 운영한다. 상세설명 api golang, gonic-gin framework를 이용하여 현재 한국 시간을 리턴하는 api를 배포하는 서버 api 서버 내에 filebeat..." }, { "title": "우분투에 ELK(Elasticsearch, Logstash, Kibana) 구축해보기", "url": "/posts/elk-experiment/", "categories": "Elastic", "tags": "elk, elasticsearch, logstash, kibana", "date": "2021-10-04 17:25:00 +0900", "snippet": "개요 우분투 환경에 ELK를 구축하여 후암동의 평균 공동주택 공시가격을 구해본다.환경 설명 Windows 10 pro(실제환경)에서 docker를 이용하여 우분투로 가상환경을 구축한다. 실제환경의 ~/Document/elasticsearch 디렉토리와 가상환경 /home/elasticsearch를 연결한다. Elasticsearch, Logstash, Kibana는 하나의 가상환경에 설치 및 실행한다.우분투 환경 구축 # 실제환경의 ~/Document/elasticsearch에서 실행&amp;gt; docker..." }, { "title": "React 사용 시 JWT를 어디에 저장해야할까?", "url": "/posts/where-you-save-auth-in-client/", "categories": "Web", "tags": "golang, react, js, jwt", "date": "2021-08-30 15:31:00 +0900", "snippet": "개요 예전에 React를 처음 사용할 때 backend를 jwt 인증방식으로 구현한 뒤frontend에서는 이 jwt를 어디에 저장할지 고민했었다. 그때 4장. JWT 이해 및 적용를 보고쿠키에 httpOnly 설정으로 저장하는 방법을 사용하기로 결정했다. 당시는 따라하는데 급급하여 무작정 똑같이 하였는데,이번에 gonic-gin CORS 처리, CORS를 이용한 XSS 공격실험를 통해쿠키에 저장하는 방법에 대한 작은 확신이 가졌으며앞으로도 위와 같은 방법으로 구현해도 괜찮겠다는 생각이 들었다.JWT 저장 1. REDUX..." }, { "title": "CORS를 이용한 XSS 공격 실험(카카오 로그인)", "url": "/posts/xss-cors-example/", "categories": "Web", "tags": "gonic-gin, cors, xss", "date": "2021-08-27 18:01:00 +0900", "snippet": "개요 CORS에 대해 알아가다 보니 이를 이용하여 악의적인 스크립트로사용자 인증 정보를 공격자 서버로 보낼 수도 있겠다(XSS 공격)라는 생각이 들었다. 그래서 예시를 작성해 실험해보았다. gonic-gin CORS 처리XSS(Cross-stie scripting) 정의(MDN 문서에서 아래 내용 발췌) XSS는 공격자가 클라이언트 측 스크립트를 웹 사이트에 삽입하여다른 사용자의 부라우저에서 수행되게 하는 공격의 유형을 말한다. 삽입된 코드는 웹 사이트에서 피해 사용자의 브라우저로 전송이 됨으로..." }, { "title": "gonic-gin CORS 처리", "url": "/posts/cors/", "categories": "Golang", "tags": "gonic-gin, cors", "date": "2021-08-24 18:24:00 +0900", "snippet": "개요 cors에 대해서 자세히 알아본다. gin web framework 사용 시 cors 처리 예시를 작성해본다.CORS 란(참고) 정의 CORS(Cross-Origin Resource Sharing, CORS)는 추가적인 HTTP 헤더를 사용하여,다른 출처의 선택한 자원에 접근할 수 있도록 브라우저에게 알려주는 체제이다. 자세한 설명 보안 상의 이유로 브라우저는 스크립트에서 시작한 다른 서버로의 HTTP 요청을 제한한다. 예를들어 기본적으로 XMLHttpReques..." }, { "title": "gem 기반으로 jekyll 블로그 만들기(chirpy 테마, windows)", "url": "/posts/jekyll-theme-chirpy-with-gem/", "categories": "Github blog", "tags": "github blog, jekyll, deployment", "date": "2021-07-23 19:19:00 +0900", "snippet": "개요 기존의 fork 방식으로 chirpy 테마 jekyll 블로그를 운영하다가 여러 문제가 발생했다. html-proofer HTML parsing error가 발생하더니,이제는 아예 배포 후 테스트를 통과하지 못한다. 이와 같은 문제는 버전업만으로도 쉽게 해결된다는 것을 알아내었다. 그래서 원본 repo를 로컬에 등록한 후 pull을 했더니삭제한 예제를 포함하여 190개에 달하는 변경사항과 50여개의 conflict가 발생하였다. 이를 해결하기 위해 gem 기반으로 블로그를 다시 구축하였다.환경 os ..." }, { "title": "git push 시 자동으로 pull and push하는 shell script 작성", "url": "/posts/pull-and-push-automation/", "categories": "Shell", "tags": "shell script, git", "date": "2021-07-23 18:37:00 +0900", "snippet": "개요 git push 전 git db를 최신화 시키고 이를 rebase 하여 local에서 conflict 처리를 하고자 한다. 이를 위해 해당 기능의 명령어를 shell script로 작성하여 해결하였다.발단(형상관리 방법의 변화) 메인페이지의 빈번한 수정이 요청됨에 따라 배포 주기가 엄청 짧아졌다. 이에 대응하기 위해 형상관리 방법을 아래와 같이 간결하게 변경하였다. 기존 방식 (팀장) 공용 remote github repo 생성 (팀장) 실서버 배포용으..." }, { "title": "html-proofer HTML parsing error 해결", "url": "/posts/html-parser-error/", "categories": "Jekyll", "tags": "html, jekyll, chirpy", "date": "2021-06-19 07:00:00 +0900", "snippet": "개요 chirpy 테마 사용 중 kramdown의 html language code block에서 에러가 발생해 테스트를 통과하지 못하는 문제가 발견되었다. 원인은 메인에서 노출되는 미리보기 항목에서 html 코드 부분이 노출되면서parsing 에러가 나는 것이었다. 이를 막기 위해 글 서두에 일정량의 글을 써서 html 코드가 미리보기에서 노출되지 않도록 하면 된다(미리보기에서 escape하는 기능이 필요한듯). (추가)chirpy 테마 최신 버전을 사용하면 이 문제가 해결된다.Test 용 html &am..." }, { "title": "Label 태그에 개행(newLine) 넣기", "url": "/posts/apply-innerHTML-in-label-tag/", "categories": "Javascript", "tags": "javascript, golang", "date": "2021-06-18 17:15:00 +0900", "snippet": "개요 Label 태그에 개행을 넣은 경험을 기록한다. gonic-gin으로 환경을 만들어 실험환경을 구축한다. js를 통해 문제를 해결한다.Label 태그 Input 태그를 설명하는 문자열이 필요한 경우, Label 태그에 넣어 추가한다. Label 태그 사용법 Label 태그의 for attribute에 Input 태그 id 할당 &amp;lt;input type=&quot;text&quot; name=&quot;testInput&quot; id..." }, { "title": "두 대의 공유기가 연결된 환경에서 포트포워드하기(in windows)", "url": "/posts/2-iptime-port-forward/", "categories": "Network", "tags": "portforwarding, router, iptime", "date": "2021-06-02 14:59:00 +0900", "snippet": "개요 서브 공유기에 랜선을 연결하여 사용 중이신 개발자님께서본인 pc에서 개발 서버를 올린 후 개발물을 모바일로 확인해야하는 하는 이슈가 생겼다. 서브 공유기에 포트포워드을 해주어 문제를 해결하였다.환경 ISP와 직접 연결된 메인 공유기가 있고,메인 공유기에 랜선을 연결하여 작은 방 내에서 라우팅하는 서브 공유기가 있고,우리 개발자님 pc는 서브 공유기와 랜선으로 연결되어있는 구조이다. 공유기는 iptime으로 가정한다. 포트포워드 모바일이 메인 공유기의 무선랜에 연결되어 있다고 가정하자. 모바일이 메인 공유기 무..." }, { "title": "노드 개발 서버 모바일에서 접속하기(in windows)", "url": "/posts/allow-node-private-firewall/", "categories": "Network", "tags": "javascript, node, windows, firewall, network", "date": "2021-05-28 19:00:00 +0900", "snippet": "개요 노드로 웹 서버를 실행하고 같은 네트워크에 있는 모바일 디바이스로 접속하니 접속 실패하였다. 모바일에서 localhost 접속(in windows) 방법대로 했으나 되지 않았다. 혹시나 하여 golang으로 웹 서버를 실행하고 똑같이 모바일 디바이스로 접속해보니 된다. 원인은 node 자체에서 추가한 방화벽 규칙이 있었고,이 방화벽이 개인(private) 접근을 막고 있어 생기는 문제였다. 이 방화벽 인바운드 규칙을 차단에서 허용으로 바꾸어 해결하였다.3000번 포트 허용 모바일에서 localhost 접속(in..." }, { "title": "자바스크립트 정규식에서 유니코드 다루기", "url": "/posts/js-unicode-regex/", "categories": "Javascript", "tags": "javascript, regex, regularexpression, unicode", "date": "2021-05-25 18:50:00 +0900", "snippet": "개요 프론트에서 input에 4byte 이모지 입력을 막기 위해 정규식 적용하여 이를 기록한다.자바스크립트 정규식 플래그 자바스크립트에서 정규식을 쓸 때, 정규식 문 마지막 슬래쉬(/) 뒤에 플래그를 붙일 수 있다. 플래그 g 전역 검색 i 대소문자 구분 없는 검색 m 다중행(multi-line) 검색 s ..." }, { "title": "Golang에서 python generator 구현하기", "url": "/posts/read-big-text-using-golang/", "categories": "Golang", "tags": "goroutine, bufio, generator", "date": "2021-05-18 17:59:00 +0900", "snippet": "개요 Golang으로 작업 중 엄청 큰 텍스트 파일을 읽을 일이 생겼는데python에서 generator로 읽어왔던 기억이 나서 비슷하게 구현하여 기록한다.python에서 파일 읽기 기본적으로 python에서 파일을 읽을 때는 fileObject.read()함수를 쓸 수 있다. fileObject.read() 함수는 fileObject가 바이너리일 경우 현재 위치에서 몇 바이트까지 읽을지를 인자로 받는다. fileObject가 텍스트일 경우 현재 위치에서 몇개의 문자열까지 읽을지를 인자로 받는다. 인자를 입력하지 않..." }, { "title": "브라우저 캐시 막기", "url": "/posts/prevent-browser-cache/", "categories": "Web", "tags": "nocache", "date": "2021-05-13 15:49:00 +0900", "snippet": "개요 사용자가 브라우저에서 뒤로가기 입력 시 브라우저 캐시가 로드되어 곤란할 때가 있다. http header의 값을 변경하여 브라우저가 해당 페이지를 캐싱하지 않도록 할 수 있다.캐싱 막기 웹 서버가 해당 페이지를 로드할 때, 아래와 같은 헤더를 추가한다. Cache-Control: no-cache, no-store, must-revalidate 참고 Cache-Control" }, { "title": "모바일에서 localhost 접속(in windows)", "url": "/posts/mobile-localhost/", "categories": "Network", "tags": "windows, mobile, localhost", "date": "2021-05-05 07:58:00 +0900", "snippet": "개요 모바일에서 개발물에 문제가 있나 확인하기 위해 모바일에서 개발 서버로 접속하고 싶어졌다. 윈도우 방화벽에서 인바운드 포트를 개발 서버 포트로 지정하여 특정 포트를 허용한다. 윈도우에서 모바일과 연결된 무선랜의 private ip를 고정시킨다. 이제 모바일에서 브라우저를 켜고 [위에서 고정한 ip]:[해당 포트]로 접근하면 성공이다.개발 서버 실행 개발 서버를 실행하여 localhost:[지정포트]로 접속할 수 있게 한다. 나의 경우 localhost:8080으로 접근할 수 있도록 하였다.윈도우 방화벽에서 개발 ..." }, { "title": "이모지(emoji) 삽입 실패 문제 해결", "url": "/posts/emoji-db-collation/", "categories": "MariaDB", "tags": "golang, unicode, collation, emoji, regexp", "date": "2021-05-05 07:58:00 +0900", "snippet": "개요 DB 관련 에러를 처리하여 이를 기록한다. DB에러는 Error 1366: Incorrect string value 로 입력된 string에특정 emoji가 포함되어 발생하는 것으로 파악되었다. 여러 방법 중 문제의 emoji를 대체 텍스트로 변경하는 방법으로 해결하였다.문제 발생 이유 MariaDB collation MariaDB에서 table을 생성할 때 charset과 collation을 지정한다. charset은 문자(기호)와 인코딩의 집합이고, collation은 charset안..." }, { "title": "gin-swagger 파라미터 유형에 따른 주석 변경", "url": "/posts/gin-swagger-param/", "categories": "Golang, gin-swagger", "tags": "gin, swagger, gin-swagger", "date": "2021-05-02 23:40:00 +0900", "snippet": "개요 gin-swagger로 API 문서 만들때, 파라미터 받는 방식마다gin-swagger 주석이 다른데 자주 까먹어서 기록한다.파라미터 종류 Query Parameter method: GET, URL: /base/url?param=123 Path Variable method: GET, URL: /base/url/123 Gin-swagger 문서 주석 위치 controller 함수 위에 적으면 된다. controller example ..." }, { "title": "AWS RDS에 EC2 접속 허용하기", "url": "/posts/aws-rds-allow-ec2/", "categories": "AWS", "tags": "rds, ec2, security-group", "date": "2021-05-02 23:06:00 +0900", "snippet": "개요 기본 설정으로 RDS와 ec2를 팠는데, ec2에서 RDS 접속이 안되는 현상이 발생해서이를 해결했다.RDS와 ec2 팔 때 주의할 점 RDS와 ec2 리전을 동일하게 파야한다.다르게 파면 안 나온다.(이렇게 쓰려면 기본 세팅 외에 다른 조치를 해야하는 듯)문제 발생 이유 RDS에서 사용하는 보안그룹 세팅 시 ec2에서 사용 중인 보안그룹 ID를인바운드 그룹에 추가해줘야 한다. RDS에서 사용하는 보안그룹, 인바운드 그룹에 ec2 IP를 추가했지만이 방법은 정상 작동하지 않았다.해결과정 ec2 정보 저장 ..." }, { "title": "windows에서 python 환경 세팅", "url": "/posts/setting-python-env-in-windows/", "categories": "Python", "tags": "miniconda, python, env", "date": "2021-01-31 12:36:00 +0900", "snippet": "개요 친구에게 python 환경 세팅 방법을 공유하기 위해 이 글을 남긴다. 보편적으로 사용하는 os는 windows이기 때문에 windows 기반으로 작성한다.miniconda 설치 설명 가상환경 세팅을 쉽게 하기 위해 miniconda를 이용한다. 실행방법 miniconda 설치 링크 python 3.x(지금은 3.8)의 windows 64 bit 인스톨러를 선택하여 다운로드 한다. 인스톨러를 실행하여 다운로드 받는다. 가상환경 생성 설명 ..." }, { "title": "realme x stock rom으로 복구", "url": "/posts/go-to-stock-rom/", "categories": "Android", "tags": "realme x, unlock, unbrick, custom rom", "date": "2021-01-05 12:20:00 +0900", "snippet": "개요 설명 벽돌(soft brick)된 realme x를 다시 제조사 롬(stock rom)으로 되돌리는 방법이다. 웹에 있는 정보 중 유일하게 성공한 방법이다. 기기 정보 모델 realme x 롬 realme UI 1.0 (os에서 버전 확인해보면 RMX 1901 *** c.17 이었던 것 같다.) (글로벌 롬은 RMX 1901EX로 시작하는데 ..." }, { "title": "realme x 언락 및 커스텀 롬 설치", "url": "/posts/realme-x-unlock-and-install-custom-rom/", "categories": "Android", "tags": "realme x, unlock, unbrick, custom rom", "date": "2021-01-05 12:00:00 +0900", "snippet": "개요 동기 갑작스럽게 realme x 공기계를 사용할 일이 생겼다. 아무래도 중국 롬이다 보니 사소한 일을 할 때에서 개인정보 동의 요청을 받는다. 그래서 실 사용을 위해 커스텀롬을 올리는 작업을 2~3일 간 진행하였다. realme 휴대폰에 커스텀 롬을 올리려는 분이 있다면 도움이 되길 바란다. 기기 정보 모델 realme x 롬 realme UI 1.0 ..." }, { "title": "우분투 자주 쓰는 명렁어 모음", "url": "/posts/ubuntu-shortcut/", "categories": "Shortcut", "tags": "ubuntu", "date": "2020-12-06 12:58:00 +0900", "snippet": "우분투 버전 확인 명령어 $ hostnamectl 참고 4 Commands to Find Linux Kernel Version " }, { "title": "한 pc에 여러 github id ssh 키 등록하기", "url": "/posts/set-git-config-for-mutiple-ids/", "categories": "Git", "tags": "git, github, ssh", "date": "2020-12-06 12:58:00 +0900", "snippet": "개요 때때로 여러 github id를 개인 pc에서 사용할 때가 있다. 이때 매번 로그인하기 귀찮으므로 각 github id 마다 ssh 키를 등록해보자환경 os: Ubuntu 18.04.5 LTSssh 키 생성 설명 id 마다 ssh 키를 생성해준다. 예시에서는 편의상 id1, id2로 지칭한다. 이메일과 rsa 파일명은 상황에 맞게 수정한다. 실행방법 ssh 디렉토리 절대경로 확인 $ cd ~/.ssh &amp;amp;&amp;amp; p..." }, { "title": "local git repository에서 git user 세팅", "url": "/posts/local-git-config/", "categories": "Git", "tags": "git, ssh", "date": "2020-12-06 12:58:00 +0900", "snippet": "개요 가끔씩 clone 한 git repo에 user setting이 되지 않아서원격 repo의 commit 목록에 global user가 노출되는 경우가 있다. 화사 프로젝트 repo와 같이 여러 사람이 같이 쓰는 private repo에서 이런 일이 발생하면관리자의 따가운 시선을 받을 수 있다.local git repo에서 git user 세팅 실행방법 $ git config --local user.name &quot;id1&quot; $ git config --local user.email &quot;id..." }, { "title": "Jekyll-theme-Chirpy의 안전한 배포", "url": "/posts/chirpy-safe-deployment/", "categories": "Github blog", "tags": "github blog, jekyll, deployment", "date": "2020-10-23 17:35:00 +0900", "snippet": "개요 첫 post를 작성할 때 Front Matter 부분에 categories를 잘못 입력하여 카테고리 링크에 문제가 생겼다. 처음에는 원인을 몰라서 계속 헤매다가 Jekyll-theme-Chirpy에 CI/CD가 붙어있다는 것을 알게 되었다. 자세히 보니 내 commits은 모두 테스트를 통과하지 못하고 있었다. 이 부분을 자세히 알기 위해 Chirpy의 README.md를 자세히 읽어보니, Github page에 배포하는 경우 따라야하는 안전한 배포 방법이 기술되어 있었다. 이 부분을 참조하면 나와 같이 오류..." }, { "title": "Jekyll을 이용하여 Github 블로그 만들기(with windows, docker)", "url": "/posts/how-to-make-jekyll-blog/", "categories": "Github blog", "tags": "github blog, jekyll, windows, docker", "date": "2020-10-23 12:56:00 +0900", "snippet": "개요 전반적 구성 Jekyll을 이용하여 웹 사이트에 필요한 정적(static) 파일을 생성한다(ex. html, css, js, img 등) Github에 정적 파일 호스팅을 시도한다. 매번 Github에 올려서 확인하기 어려움으로 로컬 환경을 구축하여 로컬에서 확인 후 Github에 올린다. 정적 웹 사이트 구조 오직 정적 파일로만 이루어진 웹 사이트 정적 파일을 호스팅 서버에 올리고, 웹 서버(ex. 아파치 웹 서버, nginx) 설정 및 실행시키면..." } ]
